{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    "\n",
    "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—É–∏–º–æ–≤. –Ø –±—É–¥—É —Ä–µ–≤—å—é–µ—Ä–æ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –¢—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–∞ \"—Ç—ã\"üòè –ù–∞–¥–µ—é—Å—å, —Ç–µ–±—è —Ç–∞–∫–∂–µ –Ω–µ —Å–º—É—Ç–∏—Ç, –µ—Å–ª–∏ —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –Ω–∞ \"—Ç—ã\", –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º!\n",
    "\n",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–Ω–∏ –±—É–¥—É—Ç –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –≤ —Å–ª—É—á–∞–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞. \n",
    "\n",
    "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–≤–æ–∏–º–∏ –ø–æ —à–∞–±–ª–æ–Ω—É, –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–º—É —á—É—Ç—å –Ω–∏–∂–µ. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å –ø—É—Ç–∞–Ω–∏—Ü–∞üòâ\n",
    "\n",
    "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã–µ <font color='green'>–∑–µ–ª–µ–Ω—ã–º</font>, <font color='gold'>–∂–µ–ª—Ç—ã–º</font> –∏ <font color='red'>–∫—Ä–∞—Å–Ω—ã–º</font> —Ü–≤–µ—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n",
    "\n",
    "<br/>\n",
    "\n",
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.\n",
    "</div>\n",
    "\n",
    "<br/>\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "    <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "    \n",
    "<b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ, –µ—Å–ª–∏ –≤–Ω–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã.\n",
    "</div>\n",
    "\n",
    "\n",
    "<br/>\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"></h2>\n",
    "\n",
    "    \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    " –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞, –µ—Å–ª–∏ —Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–≥–∏.\n",
    "</div>\n",
    "    \n",
    "    \n",
    "<br/>    \n",
    "<div class=\"alert alert-info\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>üëã:</b> –í —Ç–∞–∫–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —è—á–µ–π–∫–µ —è –ø—Ä–æ—à—É —Ç–µ–±—è –æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. –ï—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –≤—ã—à–µ, –Ω–µ –∑–∞–±—ã–≤–∞–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞ v.2\".\n",
    "</div> \n",
    "\n",
    "<br/>    \n",
    "    \n",
    "–£–≤–∏–¥–µ–≤ —É —Ç–µ–±—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å, –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —è –ª–∏—à—å —É–∫–∞–∂—É –Ω–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –¥–∞–º —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–µ. –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ç–≤–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–∞–∫–∂–µ, –∏ —è –ø—ã—Ç–∞—é—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–±—è –∏–º–µ–Ω–Ω–æ –∫ —Ä–∞–±–æ—Ç–µ –¥–∞—Ç–∞—Å–∞–µ–Ω—Ç–∏—Å—Ç–æ–º. –ù–æ –µ—Å–ª–∏ —Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π - –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —è –¥–∞–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É!ü§ì"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": [],
    "toc": true
   },
   "source": [
    "<h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#–ú–µ—Ç—Ä–∏–∫–∞-–æ—Ü–µ–Ω–∫–∏\" data-toc-modified-id=\"–ú–µ—Ç—Ä–∏–∫–∞-–æ—Ü–µ–Ω–∫–∏-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>–ú–µ—Ç—Ä–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏</a></span></li><li><span><a href=\"#–†–∞—Å—á–µ—Ç-—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\" data-toc-modified-id=\"–†–∞—Å—á–µ—Ç-—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</a></span></li><li><span><a href=\"#–£—Å—Ç–∞–Ω–æ–≤–∫–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫\" data-toc-modified-id=\"–£—Å—Ç–∞–Ω–æ–≤–∫–∞-–±–∏–±–ª–∏–æ—Ç–µ–∫-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫</a></span></li><li><span><a href=\"#–ò–º–ø–æ—Ä—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫\" data-toc-modified-id=\"–ò–º–ø–æ—Ä—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫</a></span></li><li><span><a href=\"#–ò–º–ø–æ—Ä—Ç-–¥–∞–Ω–Ω—ã—Ö\" data-toc-modified-id=\"–ò–º–ø–æ—Ä—Ç-–¥–∞–Ω–Ω—ã—Ö-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</a></span></li><li><span><a href=\"#–ê–Ω–∞–ª–∏–∑-–¥–∞–Ω–Ω—ã—Ö\" data-toc-modified-id=\"–ê–Ω–∞–ª–∏–∑-–¥–∞–Ω–Ω—ã—Ö-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</a></span><ul class=\"toc-item\"><li><span><a href=\"#–ü–µ—Ä–≤–∏—á–Ω—ã–π-–≤–∑–≥–ª—è–¥-–Ω–∞-–¥–∞–Ω–Ω—ã–µ\" data-toc-modified-id=\"–ü–µ—Ä–≤–∏—á–Ω—ã–π-–≤–∑–≥–ª—è–¥-–Ω–∞-–¥–∞–Ω–Ω—ã–µ-6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;</span>–ü–µ—Ä–≤–∏—á–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–µ</a></span><ul class=\"toc-item\"><li><span><a href=\"#–ü–µ—Ä–≤–∏—á–Ω—ã–π-–≤—ã–≤–æ–¥-—Ç–∞–±–ª–∏—Ü\" data-toc-modified-id=\"–ü–µ—Ä–≤–∏—á–Ω—ã–π-–≤—ã–≤–æ–¥-—Ç–∞–±–ª–∏—Ü-6.1.1\"><span class=\"toc-item-num\">6.1.1&nbsp;&nbsp;</span>–ü–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü</a></span></li><li><span><a href=\"#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è-–æ-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏-—Å—Ç–æ–ª–±—Ü–æ–≤\" data-toc-modified-id=\"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è-–æ-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏-—Å—Ç–æ–ª–±—Ü–æ–≤-6.1.2\"><span class=\"toc-item-num\">6.1.2&nbsp;&nbsp;</span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤</a></span></li><li><span><a href=\"#–û–ø–∏—Å–∞–Ω–∏–µ-–¥–∞–Ω–Ω—ã—Ö-–≤-—Å—Ç–æ–ª–±—Ü–∞—Ö\" data-toc-modified-id=\"–û–ø–∏—Å–∞–Ω–∏–µ-–¥–∞–Ω–Ω—ã—Ö-–≤-—Å—Ç–æ–ª–±—Ü–∞—Ö-6.1.3\"><span class=\"toc-item-num\">6.1.3&nbsp;&nbsp;</span>–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö</a></span></li><li><span><a href=\"#–ü—Ä–æ–≤–µ—Ä–∫–∞-–ø—Ä–æ–ø—É—Å–∫–æ–≤\" data-toc-modified-id=\"–ü—Ä–æ–≤–µ—Ä–∫–∞-–ø—Ä–æ–ø—É—Å–∫–æ–≤-6.1.4\"><span class=\"toc-item-num\">6.1.4&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤</a></span></li><li><span><a href=\"#–î—É–±–ª–∏–∫–∞—Ç—ã-—Å—Ç—Ä–æ–∫\" data-toc-modified-id=\"–î—É–±–ª–∏–∫–∞—Ç—ã-—Å—Ç—Ä–æ–∫-6.1.5\"><span class=\"toc-item-num\">6.1.5&nbsp;&nbsp;</span>–î—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç—Ä–æ–∫</a></span></li></ul></li><li><span><a href=\"#–°–æ–¥–µ—Ä–∂—Ä–∞–Ω–∏–µ-–¥–∞–Ω–Ω—ã—Ö\" data-toc-modified-id=\"–°–æ–¥–µ—Ä–∂—Ä–∞–Ω–∏–µ-–¥–∞–Ω–Ω—ã—Ö-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;</span>–°–æ–¥–µ—Ä–∂—Ä–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</a></span></li></ul></li><li><span><a href=\"#–§–æ—Ä–º—É–ª–∞-–æ–±–æ–≥–æ—â–µ–Ω–∏—è-–∑–æ–ª–æ—Ç–∞\" data-toc-modified-id=\"–§–æ—Ä–º—É–ª–∞-–æ–±–æ–≥–æ—â–µ–Ω–∏—è-–∑–æ–ª–æ—Ç–∞-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;</span>–§–æ—Ä–º—É–ª–∞ –æ–±–æ–≥–æ—â–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞</a></span></li><li><span><a href=\"#–§—É–Ω–∫—Ü–∏—è-sMAPE\" data-toc-modified-id=\"–§—É–Ω–∫—Ü–∏—è-sMAPE-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;</span>–§—É–Ω–∫—Ü–∏—è sMAPE</a></span><ul class=\"toc-item\"><li><span><a href=\"#sMAPE\" data-toc-modified-id=\"sMAPE-8.1\"><span class=\"toc-item-num\">8.1&nbsp;&nbsp;</span>sMAPE</a></span></li><li><span><a href=\"#final-sMAPE\" data-toc-modified-id=\"final-sMAPE-8.2\"><span class=\"toc-item-num\">8.2&nbsp;&nbsp;</span>final sMAPE</a></span></li></ul></li><li><span><a href=\"#–ê–Ω–∞–ª–∏–∑-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö-–æ–ø–µ—Ä–∞—Ü–∏–π\" data-toc-modified-id=\"–ê–Ω–∞–ª–∏–∑-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö-–æ–ø–µ—Ä–∞—Ü–∏–π-9\"><span class=\"toc-item-num\">9&nbsp;&nbsp;</span>–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π</a></span></li><li><span><a href=\"#–ê–Ω–∞–ª–∏–∑-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è-–∑–Ω–∞—á–µ–Ω–∏–π\" data-toc-modified-id=\"–ê–Ω–∞–ª–∏–∑-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è-–∑–Ω–∞—á–µ–Ω–∏–π-10\"><span class=\"toc-item-num\">10&nbsp;&nbsp;</span>–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π</a></span></li><li><span><a href=\"#–°—Ä–∞–≤–Ω–∏–º-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è-—Ä–∞–∑–º–µ—Ä–æ–≤-–≥—Ä–∞–Ω—É–ª-—Å—ã—Ä—å—è-–Ω–∞-–æ–±—É—á–∞—é—â–µ–π-–∏-—Ç–µ—Å—Ç–æ–≤–æ–π-–≤—ã–±–æ—Ä–∫–∞—Ö.\" data-toc-modified-id=\"–°—Ä–∞–≤–Ω–∏–º-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è-—Ä–∞–∑–º–µ—Ä–æ–≤-–≥—Ä–∞–Ω—É–ª-—Å—ã—Ä—å—è-–Ω–∞-–æ–±—É—á–∞—é—â–µ–π-–∏-—Ç–µ—Å—Ç–æ–≤–æ–π-–≤—ã–±–æ—Ä–∫–∞—Ö.-11\"><span class=\"toc-item-num\">11&nbsp;&nbsp;</span>–°—Ä–∞–≤–Ω–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞–Ω—É–ª —Å—ã—Ä—å—è –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö.</a></span></li><li><span><a href=\"#–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∞—è-–≤—Å–µ—Ö-–≤–µ—â–µ—Å—Ç–≤-–Ω–∞-—Ä–∞–∑–Ω—ã—Ö-—Å—Ç–∞–¥–∏—è—Ö:-–≤-—Å—ã—Ä—å–µ,-–≤-—á–µ—Ä–Ω–æ–≤–æ–º-–∏-—Ñ–∏–Ω–∞–ª—å–Ω–æ–º-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞—Ö\" data-toc-modified-id=\"–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∞—è-–≤—Å–µ—Ö-–≤–µ—â–µ—Å—Ç–≤-–Ω–∞-—Ä–∞–∑–Ω—ã—Ö-—Å—Ç–∞–¥–∏—è—Ö:-–≤-—Å—ã—Ä—å–µ,-–≤-—á–µ—Ä–Ω–æ–≤–æ–º-–∏-—Ñ–∏–Ω–∞–ª—å–Ω–æ–º-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞—Ö-12\"><span class=\"toc-item-num\">12&nbsp;&nbsp;</span>–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∞—è –≤—Å–µ—Ö –≤–µ—â–µ—Å—Ç–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö: –≤ —Å—ã—Ä—å–µ, –≤ —á–µ—Ä–Ω–æ–≤–æ–º –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞—Ö</a></span><ul class=\"toc-item\"><li><span><a href=\"#–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–≤-—Å—ã—Ä—å–µ–≤–æ–π-—Å—Ç–∞–¥–∏–∏\" data-toc-modified-id=\"–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–≤-—Å—ã—Ä—å–µ–≤–æ–π-—Å—Ç–∞–¥–∏–∏-12.1\"><span class=\"toc-item-num\">12.1&nbsp;&nbsp;</span>–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Å—ã—Ä—å–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏</a></span></li><li><span><a href=\"#–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–≤-—á–µ—Ä–Ω–æ–≤–æ–π-—Å—Ç–∞–¥–∏–∏\" data-toc-modified-id=\"–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–≤-—á–µ—Ä–Ω–æ–≤–æ–π-—Å—Ç–∞–¥–∏–∏-12.2\"><span class=\"toc-item-num\">12.2&nbsp;&nbsp;</span>–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —á–µ—Ä–Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏</a></span></li><li><span><a href=\"#–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–≤-—Ñ–∏–Ω–∞–ª—å–Ω–æ–π-—Å—Ç–∞–¥–∏–∏\" data-toc-modified-id=\"–°—É–º–º–∞—Ä–Ω–∞—è-–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–≤-—Ñ–∏–Ω–∞–ª—å–Ω–æ–π-—Å—Ç–∞–¥–∏–∏-12.3\"><span class=\"toc-item-num\">12.3&nbsp;&nbsp;</span>–°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏</a></span></li><li><span><a href=\"#–í—ã–≤–æ–¥—ã-–ø–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é-–º–µ—Ç–∞–ª–ª–æ–≤\" data-toc-modified-id=\"–í—ã–≤–æ–¥—ã-–ø–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é-–º–µ—Ç–∞–ª–ª–æ–≤-12.4\"><span class=\"toc-item-num\">12.4&nbsp;&nbsp;</span>–í—ã–≤–æ–¥—ã –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –º–µ—Ç–∞–ª–ª–æ–≤</a></span></li></ul></li><li><span><a href=\"#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-–¥–ª—è-–º–æ–¥–µ–ª–∏-–æ–±—É—á–µ–Ω–∏—è\" data-toc-modified-id=\"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-–¥–ª—è-–º–æ–¥–µ–ª–∏-–æ–±—É—á–µ–Ω–∏—è-13\"><span class=\"toc-item-num\">13&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è</a></span></li><li><span><a href=\"#–†–∞–∑–±–∏–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö\" data-toc-modified-id=\"–†–∞–∑–±–∏–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-14\"><span class=\"toc-item-num\">14&nbsp;&nbsp;</span>–†–∞–∑–±–∏–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a></span><ul class=\"toc-item\"><li><span><a href=\"#–û–±—É—á–µ–Ω–∏–µ-–º–æ–¥–µ–ª–∏\" data-toc-modified-id=\"–û–±—É—á–µ–Ω–∏–µ-–º–æ–¥–µ–ª–∏-14.1\"><span class=\"toc-item-num\">14.1&nbsp;&nbsp;</span>–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span><ul class=\"toc-item\"><li><span><a href=\"#–õ–∏–Ω–µ–π–Ω–∞—è-—Ä–µ–≥—Ä–µ—Å—Å–∏—è\" data-toc-modified-id=\"–õ–∏–Ω–µ–π–Ω–∞—è-—Ä–µ–≥—Ä–µ—Å—Å–∏—è-14.1.1\"><span class=\"toc-item-num\">14.1.1&nbsp;&nbsp;</span>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</a></span></li><li><span><a href=\"#K-–ë–ª–∏–∂–∞–π—à–∏—Ö-–°–æ—Å–µ–¥–µ–π-(KNN)\" data-toc-modified-id=\"K-–ë–ª–∏–∂–∞–π—à–∏—Ö-–°–æ—Å–µ–¥–µ–π-(KNN)-14.1.2\"><span class=\"toc-item-num\">14.1.2&nbsp;&nbsp;</span>K –ë–ª–∏–∂–∞–π—à–∏—Ö –°–æ—Å–µ–¥–µ–π (KNN)</a></span></li><li><span><a href=\"#–ú–µ—Ç–æ–¥-–æ–ø–æ—Ä–Ω—ã—Ö-–í–µ–∫—Ç–æ—Ä–æ–≤-(SVMs)\" data-toc-modified-id=\"–ú–µ—Ç–æ–¥-–æ–ø–æ—Ä–Ω—ã—Ö-–í–µ–∫—Ç–æ—Ä–æ–≤-(SVMs)-14.1.3\"><span class=\"toc-item-num\">14.1.3&nbsp;&nbsp;</span>–ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –í–µ–∫—Ç–æ—Ä–æ–≤ (SVMs)</a></span></li><li><span><a href=\"#–†–µ–≥—Ä–µ—Å—Å–∏—è-–¥–µ—Ä–µ–≤–∞-—Ä–µ—à–µ–Ω–∏–π\" data-toc-modified-id=\"–†–µ–≥—Ä–µ—Å—Å–∏—è-–¥–µ—Ä–µ–≤–∞-—Ä–µ—à–µ–Ω–∏–π-14.1.4\"><span class=\"toc-item-num\">14.1.4&nbsp;&nbsp;</span>–†–µ–≥—Ä–µ—Å—Å–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π</a></span></li><li><span><a href=\"#–†–µ–∑—É–ª—å—Ç–∞—Ç—ã-–æ–±—É—á–µ–Ω–∏—è\" data-toc-modified-id=\"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã-–æ–±—É—á–µ–Ω–∏—è-14.1.5\"><span class=\"toc-item-num\">14.1.5&nbsp;&nbsp;</span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è</a></span></li></ul></li><li><span><a href=\"#–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ-–º–æ–¥–µ–ª–∏-–Ω–∞-—Ç–µ—Å—Ç–æ–≤–æ–π-–≤—ã–±–æ—Ä–∫–µ\" data-toc-modified-id=\"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ-–º–æ–¥–µ–ª–∏-–Ω–∞-—Ç–µ—Å—Ç–æ–≤–æ–π-–≤—ã–±–æ—Ä–∫–µ-14.2\"><span class=\"toc-item-num\">14.2&nbsp;&nbsp;</span>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ</a></span></li><li><span><a href=\"#–°—Ä–∞–≤–Ω–µ–Ω–∏–µ-–º–æ–¥–µ–ª–∏\" data-toc-modified-id=\"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ-–º–æ–¥–µ–ª–∏-14.3\"><span class=\"toc-item-num\">14.3&nbsp;&nbsp;</span>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span></li><li><span><a href=\"#–í—ã–≤–æ–¥—ã-–ø–æ-–º–æ–¥–µ–ª—è–º\" data-toc-modified-id=\"–í—ã–≤–æ–¥—ã-–ø–æ-–º–æ–¥–µ–ª—è–º-14.4\"><span class=\"toc-item-num\">14.4&nbsp;&nbsp;</span>–í—ã–≤–æ–¥—ã –ø–æ –º–æ–¥–µ–ª—è–º</a></span></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞ –∏–∑ —Ä—É–¥—ã"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è ¬´–¶–∏—Ñ—Ä—ã¬ª. –ö–æ–º–ø–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π.\n",
    "\n",
    "–ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ –∏–∑ –∑–æ–ª–æ—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Ä—É–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–æ–±—ã—á–∏ –∏ –æ—á–∏—Å—Ç–∫–∏. \n",
    "\n",
    "–ú–æ–¥–µ–ª—å –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å —É–±—ã—Ç–æ—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.\n",
    "\n",
    "–í–∞–º –Ω—É–∂–Ω–æ:\n",
    "\n",
    "1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ;\n",
    "2. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö;\n",
    "3. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å.\n",
    "\n",
    "–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º *pandas*, *matplotlib* –∏ *sklearn.* –í–∞–º –ø–æ–º–æ–∂–µ—Ç –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " <div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "    \n",
    "–í–∏–∂—É —Ç–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –ú–æ–ª–æ–¥–µ—Ü! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –∞–∫—Ü–µ–Ω—Ç—ã –≤ –≤—ã–≤–æ–¥–∞—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –ú–µ—Ç–æ–¥—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ú–µ—Ç—Ä–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "–ú–µ—Ç—Ä–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n",
    "$$\n",
    "  sMAPE = \\dfrac{1}{N}\\sum_{i=1}^n\\dfrac{|y_i - \\hat{y_i}|}{(|y_i| + |\\hat{y_i}|)/2} x 100%\n",
    "$$\n",
    "\n",
    ", –≥–¥–µ:\n",
    "- $$ y_i - $$ –ó–Ω–∞—á–µ–Ω–∏–µ  —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º i –≤ –≤—ã–±–æ—Ä–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ\n",
    "- $$ \\hat{y_i} - $$  –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º i, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ.\n",
    "- $$ N - $$ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ.\n",
    "- $$ \\sum_{i=1}^n - $$ –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –≤—ã–±–æ—Ä–∫–∏ (i –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 1 –¥–æ N)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–§–∏–Ω–∞–ª—å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: –∫–∞–∫ `25% –æ—Ç sMAPE(rougher) + 75% –æ—Ç sMAPE(final)`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n",
    "$$\n",
    "Recovery = \\dfrac{C x (F - T)}{F x (C - T)} x 100%\n",
    "$$\n",
    ", –≥–¥–µ:\n",
    "- C - –¥–æ–ª—è –∑–æ–ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–µ –ø–æ—Å–ª–µ —Ñ–ª–æ—Ç–∞—Ü–∏–∏/–æ—á–∏—Å—Ç–∫–∏;\n",
    "- F - –¥–æ–ª—è –∑–æ–ª–æ—Ç–∞ –≤ —Å—ã—Ä—å–µ/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–µ –¥–æ —Ñ–ª–æ—Ç–∞—Ü–∏–∏/–æ—á–∏—Å—Ç–∫–∏;\n",
    "- T - –¥–æ–ª—è –∑–æ–ª–æ—Ç–∞ –≤ –æ—Ç–≤–∞–ª—å–Ω—ã—Ö —Ö–≤–æ—Å—Ç–∞—Ö –ø–æ—Å–ª–µ —Ñ–ª–æ—Ç–∞—Ü–∏–∏/–æ—á–∏—Å—Ç–∫–∏."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±–∑–æ–¥–∏–º–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.  \n",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —à–∞–≥–æ–≤:\n",
    "- –§–ª–æ—Ç–∞—Ü–∏—è\n",
    "- –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –æ—á–∏—Å—Ç–∫–∏\n",
    "- –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –æ—á–∏—Å—Ç–∫–∏\n",
    "\n",
    "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –æ—Ç–≤–∞–ª—å–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞.\n",
    "\n",
    "–í —Ç–∞–±–ª–∏—Ü–µ\n",
    "- Rougher feed ‚Äî –∏—Å—Ö–æ–¥–Ω–æ–µ —Å—ã—Ä—å–µ\n",
    "- Rougher additions (–∏–ª–∏ reagent additions) ‚Äî —Ñ–ª–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∞–≥–µ–Ω—Ç—ã: Xanthate, Sulphate, Depressant \n",
    "- Xanthate ‚Äî –∫—Å–∞–Ω—Ç–æ–≥–µ–Ω–∞—Ç (–ø—Ä–æ–º–æ—Ç–µ—Ä, –∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä —Ñ–ª–æ—Ç–∞—Ü–∏–∏);\n",
    "- Sulphate ‚Äî —Å—É–ª—å—Ñ–∞—Ç (–Ω–∞ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —Å—É–ª—å—Ñ–∏–¥ –Ω–∞—Ç—Ä–∏—è);\n",
    "- Depressant ‚Äî –¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç (—Å–∏–ª–∏–∫–∞—Ç –Ω–∞—Ç—Ä–∏—è).\n",
    "- Rougher process (–∞–Ω–≥–ª. ¬´–≥—Ä—É–±—ã–π –ø—Ä–æ—Ü–µ—Å—Å¬ª) ‚Äî —Ñ–ª–æ—Ç–∞—Ü–∏—è\n",
    "- Rougher tails ‚Äî –æ—Ç–≤–∞–ª—å–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã\n",
    "- Float banks ‚Äî —Ñ–ª–æ—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞\n",
    "- Cleaner process ‚Äî –æ—á–∏—Å—Ç–∫–∞\n",
    "- Rougher Au ‚Äî —á–µ—Ä–Ω–æ–≤–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç –∑–æ–ª–æ—Ç–∞\n",
    "- Final Au ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç –∑–æ–ª–æ—Ç–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#!pip install pandas-profiling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "#import ydata_profiling\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.stats import mannwhitneyu\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.metrics import fbeta_score, make_scorer\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn import svm\n",
    "from sklearn.dummy import DummyRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    train = pd.read_csv('/Users/samolinovkonstantin/Desktop/Yandex/sborn/–°–±–æ—Ä–Ω—ã–π 2/gold_industry_train.csv')\n",
    "except:\n",
    "    train = pd.read_csv('/datasets/gold_industry_train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    full = pd.read_csv('/Users/samolinovkonstantin/Desktop/Yandex/sborn/–°–±–æ—Ä–Ω—ã–π 2/gold_industry_full.csv')\n",
    "except:\n",
    "    full = pd.read_csv('/datasets/gold_industry_full.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    test = pd.read_csv('/Users/samolinovkonstantin/Desktop/Yandex/sborn/–°–±–æ—Ä–Ω—ã–π 2/gold_industry_test.csv')\n",
    "except:\n",
    "    test = pd.read_csv('/datasets/gold_industry_test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å ydata_profiling —É—á–µ–±–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n",
    "# data_full.profile_report()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –ü–µ—Ä–≤–∏—á–Ω—ã–π –≤–∑–≥–ª—è–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_sets = [full, train, test]\n",
    "names = [full, train, test]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### –ü–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>rougher.input.feed_au</th>\n",
       "      <th>rougher.input.feed_ag</th>\n",
       "      <th>rougher.input.feed_pb</th>\n",
       "      <th>rougher.input.feed_sol</th>\n",
       "      <th>rougher.input.feed_rate</th>\n",
       "      <th>rougher.input.feed_size</th>\n",
       "      <th>rougher.input.floatbank10_sulfate</th>\n",
       "      <th>rougher.input.floatbank10_xanthate</th>\n",
       "      <th>rougher.state.floatbank10_a_air</th>\n",
       "      <th>...</th>\n",
       "      <th>secondary_cleaner.output.tail_sol</th>\n",
       "      <th>final.output.concentrate_au</th>\n",
       "      <th>final.output.concentrate_ag</th>\n",
       "      <th>final.output.concentrate_pb</th>\n",
       "      <th>final.output.concentrate_sol</th>\n",
       "      <th>final.output.recovery</th>\n",
       "      <th>final.output.tail_au</th>\n",
       "      <th>final.output.tail_ag</th>\n",
       "      <th>final.output.tail_pb</th>\n",
       "      <th>final.output.tail_sol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-01-15 00:00:00</td>\n",
       "      <td>6.486150</td>\n",
       "      <td>6.100378</td>\n",
       "      <td>2.284912</td>\n",
       "      <td>36.808594</td>\n",
       "      <td>523.546326</td>\n",
       "      <td>55.486599</td>\n",
       "      <td>11.986616</td>\n",
       "      <td>6.007990</td>\n",
       "      <td>999.706909</td>\n",
       "      <td>...</td>\n",
       "      <td>8.764648</td>\n",
       "      <td>42.192020</td>\n",
       "      <td>6.055403</td>\n",
       "      <td>9.889648</td>\n",
       "      <td>5.507324</td>\n",
       "      <td>70.541216</td>\n",
       "      <td>2.143149</td>\n",
       "      <td>10.411962</td>\n",
       "      <td>0.895447</td>\n",
       "      <td>16.904297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-01-15 01:00:00</td>\n",
       "      <td>6.478583</td>\n",
       "      <td>6.161113</td>\n",
       "      <td>2.266033</td>\n",
       "      <td>35.753385</td>\n",
       "      <td>525.290581</td>\n",
       "      <td>57.278666</td>\n",
       "      <td>11.971193</td>\n",
       "      <td>6.005766</td>\n",
       "      <td>1000.286398</td>\n",
       "      <td>...</td>\n",
       "      <td>9.001494</td>\n",
       "      <td>42.701629</td>\n",
       "      <td>6.029369</td>\n",
       "      <td>9.968944</td>\n",
       "      <td>5.257781</td>\n",
       "      <td>69.266198</td>\n",
       "      <td>2.224930</td>\n",
       "      <td>10.462676</td>\n",
       "      <td>0.927452</td>\n",
       "      <td>16.634514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-01-15 02:00:00</td>\n",
       "      <td>6.362222</td>\n",
       "      <td>6.116455</td>\n",
       "      <td>2.159622</td>\n",
       "      <td>35.971630</td>\n",
       "      <td>530.026610</td>\n",
       "      <td>57.510649</td>\n",
       "      <td>11.920603</td>\n",
       "      <td>6.197377</td>\n",
       "      <td>999.719565</td>\n",
       "      <td>...</td>\n",
       "      <td>8.842896</td>\n",
       "      <td>42.657501</td>\n",
       "      <td>6.055926</td>\n",
       "      <td>10.213995</td>\n",
       "      <td>5.383759</td>\n",
       "      <td>68.116445</td>\n",
       "      <td>2.257889</td>\n",
       "      <td>10.507046</td>\n",
       "      <td>0.953716</td>\n",
       "      <td>16.208849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-01-15 03:00:00</td>\n",
       "      <td>6.118189</td>\n",
       "      <td>6.043309</td>\n",
       "      <td>2.037807</td>\n",
       "      <td>36.862241</td>\n",
       "      <td>542.590390</td>\n",
       "      <td>57.792734</td>\n",
       "      <td>11.630094</td>\n",
       "      <td>6.203177</td>\n",
       "      <td>999.814770</td>\n",
       "      <td>...</td>\n",
       "      <td>9.122857</td>\n",
       "      <td>42.689819</td>\n",
       "      <td>6.047977</td>\n",
       "      <td>9.977019</td>\n",
       "      <td>4.858634</td>\n",
       "      <td>68.347543</td>\n",
       "      <td>2.146849</td>\n",
       "      <td>10.422762</td>\n",
       "      <td>0.883763</td>\n",
       "      <td>16.532835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-01-15 04:00:00</td>\n",
       "      <td>5.663707</td>\n",
       "      <td>6.060915</td>\n",
       "      <td>1.786875</td>\n",
       "      <td>34.347666</td>\n",
       "      <td>540.531893</td>\n",
       "      <td>56.047189</td>\n",
       "      <td>10.957755</td>\n",
       "      <td>6.198826</td>\n",
       "      <td>999.678690</td>\n",
       "      <td>...</td>\n",
       "      <td>8.871028</td>\n",
       "      <td>42.774141</td>\n",
       "      <td>6.148599</td>\n",
       "      <td>10.142511</td>\n",
       "      <td>4.939416</td>\n",
       "      <td>66.927016</td>\n",
       "      <td>2.055292</td>\n",
       "      <td>10.360302</td>\n",
       "      <td>0.792826</td>\n",
       "      <td>16.525686</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows √ó 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date  rougher.input.feed_au  rougher.input.feed_ag  \\\n",
       "0  2016-01-15 00:00:00               6.486150               6.100378   \n",
       "1  2016-01-15 01:00:00               6.478583               6.161113   \n",
       "2  2016-01-15 02:00:00               6.362222               6.116455   \n",
       "3  2016-01-15 03:00:00               6.118189               6.043309   \n",
       "4  2016-01-15 04:00:00               5.663707               6.060915   \n",
       "\n",
       "   rougher.input.feed_pb  rougher.input.feed_sol  rougher.input.feed_rate  \\\n",
       "0               2.284912               36.808594               523.546326   \n",
       "1               2.266033               35.753385               525.290581   \n",
       "2               2.159622               35.971630               530.026610   \n",
       "3               2.037807               36.862241               542.590390   \n",
       "4               1.786875               34.347666               540.531893   \n",
       "\n",
       "   rougher.input.feed_size  rougher.input.floatbank10_sulfate  \\\n",
       "0                55.486599                          11.986616   \n",
       "1                57.278666                          11.971193   \n",
       "2                57.510649                          11.920603   \n",
       "3                57.792734                          11.630094   \n",
       "4                56.047189                          10.957755   \n",
       "\n",
       "   rougher.input.floatbank10_xanthate  rougher.state.floatbank10_a_air  ...  \\\n",
       "0                            6.007990                       999.706909  ...   \n",
       "1                            6.005766                      1000.286398  ...   \n",
       "2                            6.197377                       999.719565  ...   \n",
       "3                            6.203177                       999.814770  ...   \n",
       "4                            6.198826                       999.678690  ...   \n",
       "\n",
       "   secondary_cleaner.output.tail_sol  final.output.concentrate_au  \\\n",
       "0                           8.764648                    42.192020   \n",
       "1                           9.001494                    42.701629   \n",
       "2                           8.842896                    42.657501   \n",
       "3                           9.122857                    42.689819   \n",
       "4                           8.871028                    42.774141   \n",
       "\n",
       "   final.output.concentrate_ag  final.output.concentrate_pb  \\\n",
       "0                     6.055403                     9.889648   \n",
       "1                     6.029369                     9.968944   \n",
       "2                     6.055926                    10.213995   \n",
       "3                     6.047977                     9.977019   \n",
       "4                     6.148599                    10.142511   \n",
       "\n",
       "   final.output.concentrate_sol  final.output.recovery  final.output.tail_au  \\\n",
       "0                      5.507324              70.541216              2.143149   \n",
       "1                      5.257781              69.266198              2.224930   \n",
       "2                      5.383759              68.116445              2.257889   \n",
       "3                      4.858634              68.347543              2.146849   \n",
       "4                      4.939416              66.927016              2.055292   \n",
       "\n",
       "   final.output.tail_ag  final.output.tail_pb  final.output.tail_sol  \n",
       "0             10.411962              0.895447              16.904297  \n",
       "1             10.462676              0.927452              16.634514  \n",
       "2             10.507046              0.953716              16.208849  \n",
       "3             10.422762              0.883763              16.532835  \n",
       "4             10.360302              0.792826              16.525686  \n",
       "\n",
       "[5 rows x 87 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>rougher.input.feed_au</th>\n",
       "      <th>rougher.input.feed_ag</th>\n",
       "      <th>rougher.input.feed_pb</th>\n",
       "      <th>rougher.input.feed_sol</th>\n",
       "      <th>rougher.input.feed_rate</th>\n",
       "      <th>rougher.input.feed_size</th>\n",
       "      <th>rougher.input.floatbank10_sulfate</th>\n",
       "      <th>rougher.input.floatbank10_xanthate</th>\n",
       "      <th>rougher.state.floatbank10_a_air</th>\n",
       "      <th>...</th>\n",
       "      <th>secondary_cleaner.output.tail_sol</th>\n",
       "      <th>final.output.concentrate_au</th>\n",
       "      <th>final.output.concentrate_ag</th>\n",
       "      <th>final.output.concentrate_pb</th>\n",
       "      <th>final.output.concentrate_sol</th>\n",
       "      <th>final.output.recovery</th>\n",
       "      <th>final.output.tail_au</th>\n",
       "      <th>final.output.tail_ag</th>\n",
       "      <th>final.output.tail_pb</th>\n",
       "      <th>final.output.tail_sol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-01-15 00:00:00</td>\n",
       "      <td>6.486150</td>\n",
       "      <td>6.100378</td>\n",
       "      <td>2.284912</td>\n",
       "      <td>36.808594</td>\n",
       "      <td>523.546326</td>\n",
       "      <td>55.486599</td>\n",
       "      <td>11.986616</td>\n",
       "      <td>6.007990</td>\n",
       "      <td>999.706909</td>\n",
       "      <td>...</td>\n",
       "      <td>8.764648</td>\n",
       "      <td>42.192020</td>\n",
       "      <td>6.055403</td>\n",
       "      <td>9.889648</td>\n",
       "      <td>5.507324</td>\n",
       "      <td>70.541216</td>\n",
       "      <td>2.143149</td>\n",
       "      <td>10.411962</td>\n",
       "      <td>0.895447</td>\n",
       "      <td>16.904297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-01-15 01:00:00</td>\n",
       "      <td>6.478583</td>\n",
       "      <td>6.161113</td>\n",
       "      <td>2.266033</td>\n",
       "      <td>35.753385</td>\n",
       "      <td>525.290581</td>\n",
       "      <td>57.278666</td>\n",
       "      <td>11.971193</td>\n",
       "      <td>6.005766</td>\n",
       "      <td>1000.286398</td>\n",
       "      <td>...</td>\n",
       "      <td>9.001494</td>\n",
       "      <td>42.701629</td>\n",
       "      <td>6.029369</td>\n",
       "      <td>9.968944</td>\n",
       "      <td>5.257781</td>\n",
       "      <td>69.266198</td>\n",
       "      <td>2.224930</td>\n",
       "      <td>10.462676</td>\n",
       "      <td>0.927452</td>\n",
       "      <td>16.634514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-01-15 02:00:00</td>\n",
       "      <td>6.362222</td>\n",
       "      <td>6.116455</td>\n",
       "      <td>2.159622</td>\n",
       "      <td>35.971630</td>\n",
       "      <td>530.026610</td>\n",
       "      <td>57.510649</td>\n",
       "      <td>11.920603</td>\n",
       "      <td>6.197377</td>\n",
       "      <td>999.719565</td>\n",
       "      <td>...</td>\n",
       "      <td>8.842896</td>\n",
       "      <td>42.657501</td>\n",
       "      <td>6.055926</td>\n",
       "      <td>10.213995</td>\n",
       "      <td>5.383759</td>\n",
       "      <td>68.116445</td>\n",
       "      <td>2.257889</td>\n",
       "      <td>10.507046</td>\n",
       "      <td>0.953716</td>\n",
       "      <td>16.208849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-01-15 03:00:00</td>\n",
       "      <td>6.118189</td>\n",
       "      <td>6.043309</td>\n",
       "      <td>2.037807</td>\n",
       "      <td>36.862241</td>\n",
       "      <td>542.590390</td>\n",
       "      <td>57.792734</td>\n",
       "      <td>11.630094</td>\n",
       "      <td>6.203177</td>\n",
       "      <td>999.814770</td>\n",
       "      <td>...</td>\n",
       "      <td>9.122857</td>\n",
       "      <td>42.689819</td>\n",
       "      <td>6.047977</td>\n",
       "      <td>9.977019</td>\n",
       "      <td>4.858634</td>\n",
       "      <td>68.347543</td>\n",
       "      <td>2.146849</td>\n",
       "      <td>10.422762</td>\n",
       "      <td>0.883763</td>\n",
       "      <td>16.532835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-01-15 04:00:00</td>\n",
       "      <td>5.663707</td>\n",
       "      <td>6.060915</td>\n",
       "      <td>1.786875</td>\n",
       "      <td>34.347666</td>\n",
       "      <td>540.531893</td>\n",
       "      <td>56.047189</td>\n",
       "      <td>10.957755</td>\n",
       "      <td>6.198826</td>\n",
       "      <td>999.678690</td>\n",
       "      <td>...</td>\n",
       "      <td>8.871028</td>\n",
       "      <td>42.774141</td>\n",
       "      <td>6.148599</td>\n",
       "      <td>10.142511</td>\n",
       "      <td>4.939416</td>\n",
       "      <td>66.927016</td>\n",
       "      <td>2.055292</td>\n",
       "      <td>10.360302</td>\n",
       "      <td>0.792826</td>\n",
       "      <td>16.525686</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows √ó 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date  rougher.input.feed_au  rougher.input.feed_ag  \\\n",
       "0  2016-01-15 00:00:00               6.486150               6.100378   \n",
       "1  2016-01-15 01:00:00               6.478583               6.161113   \n",
       "2  2016-01-15 02:00:00               6.362222               6.116455   \n",
       "3  2016-01-15 03:00:00               6.118189               6.043309   \n",
       "4  2016-01-15 04:00:00               5.663707               6.060915   \n",
       "\n",
       "   rougher.input.feed_pb  rougher.input.feed_sol  rougher.input.feed_rate  \\\n",
       "0               2.284912               36.808594               523.546326   \n",
       "1               2.266033               35.753385               525.290581   \n",
       "2               2.159622               35.971630               530.026610   \n",
       "3               2.037807               36.862241               542.590390   \n",
       "4               1.786875               34.347666               540.531893   \n",
       "\n",
       "   rougher.input.feed_size  rougher.input.floatbank10_sulfate  \\\n",
       "0                55.486599                          11.986616   \n",
       "1                57.278666                          11.971193   \n",
       "2                57.510649                          11.920603   \n",
       "3                57.792734                          11.630094   \n",
       "4                56.047189                          10.957755   \n",
       "\n",
       "   rougher.input.floatbank10_xanthate  rougher.state.floatbank10_a_air  ...  \\\n",
       "0                            6.007990                       999.706909  ...   \n",
       "1                            6.005766                      1000.286398  ...   \n",
       "2                            6.197377                       999.719565  ...   \n",
       "3                            6.203177                       999.814770  ...   \n",
       "4                            6.198826                       999.678690  ...   \n",
       "\n",
       "   secondary_cleaner.output.tail_sol  final.output.concentrate_au  \\\n",
       "0                           8.764648                    42.192020   \n",
       "1                           9.001494                    42.701629   \n",
       "2                           8.842896                    42.657501   \n",
       "3                           9.122857                    42.689819   \n",
       "4                           8.871028                    42.774141   \n",
       "\n",
       "   final.output.concentrate_ag  final.output.concentrate_pb  \\\n",
       "0                     6.055403                     9.889648   \n",
       "1                     6.029369                     9.968944   \n",
       "2                     6.055926                    10.213995   \n",
       "3                     6.047977                     9.977019   \n",
       "4                     6.148599                    10.142511   \n",
       "\n",
       "   final.output.concentrate_sol  final.output.recovery  final.output.tail_au  \\\n",
       "0                      5.507324              70.541216              2.143149   \n",
       "1                      5.257781              69.266198              2.224930   \n",
       "2                      5.383759              68.116445              2.257889   \n",
       "3                      4.858634              68.347543              2.146849   \n",
       "4                      4.939416              66.927016              2.055292   \n",
       "\n",
       "   final.output.tail_ag  final.output.tail_pb  final.output.tail_sol  \n",
       "0             10.411962              0.895447              16.904297  \n",
       "1             10.462676              0.927452              16.634514  \n",
       "2             10.507046              0.953716              16.208849  \n",
       "3             10.422762              0.883763              16.532835  \n",
       "4             10.360302              0.792826              16.525686  \n",
       "\n",
       "[5 rows x 87 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>rougher.input.feed_au</th>\n",
       "      <th>rougher.input.feed_ag</th>\n",
       "      <th>rougher.input.feed_pb</th>\n",
       "      <th>rougher.input.feed_sol</th>\n",
       "      <th>rougher.input.feed_rate</th>\n",
       "      <th>rougher.input.feed_size</th>\n",
       "      <th>rougher.input.floatbank10_sulfate</th>\n",
       "      <th>rougher.input.floatbank10_xanthate</th>\n",
       "      <th>rougher.state.floatbank10_a_air</th>\n",
       "      <th>...</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_a_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_a_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_b_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_b_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_a_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_a_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_b_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_b_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank6_a_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank6_a_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-12-09 14:59:59</td>\n",
       "      <td>4.365491</td>\n",
       "      <td>6.158718</td>\n",
       "      <td>3.875727</td>\n",
       "      <td>39.135119</td>\n",
       "      <td>555.820208</td>\n",
       "      <td>94.544358</td>\n",
       "      <td>6.146982</td>\n",
       "      <td>9.308612</td>\n",
       "      <td>1196.238112</td>\n",
       "      <td>...</td>\n",
       "      <td>23.018622</td>\n",
       "      <td>-500.492702</td>\n",
       "      <td>20.020205</td>\n",
       "      <td>-500.220296</td>\n",
       "      <td>17.963512</td>\n",
       "      <td>-499.939490</td>\n",
       "      <td>12.990306</td>\n",
       "      <td>-500.080993</td>\n",
       "      <td>19.990336</td>\n",
       "      <td>-499.191575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-12-09 15:59:59</td>\n",
       "      <td>4.362781</td>\n",
       "      <td>6.048130</td>\n",
       "      <td>3.902537</td>\n",
       "      <td>39.713906</td>\n",
       "      <td>544.731687</td>\n",
       "      <td>123.742430</td>\n",
       "      <td>6.210119</td>\n",
       "      <td>9.297709</td>\n",
       "      <td>1201.904177</td>\n",
       "      <td>...</td>\n",
       "      <td>23.024963</td>\n",
       "      <td>-501.153409</td>\n",
       "      <td>20.054122</td>\n",
       "      <td>-500.314711</td>\n",
       "      <td>17.979515</td>\n",
       "      <td>-499.272871</td>\n",
       "      <td>12.992404</td>\n",
       "      <td>-499.976268</td>\n",
       "      <td>20.013986</td>\n",
       "      <td>-500.625471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-12-09 16:59:59</td>\n",
       "      <td>5.081681</td>\n",
       "      <td>6.082745</td>\n",
       "      <td>4.564078</td>\n",
       "      <td>37.208683</td>\n",
       "      <td>558.155110</td>\n",
       "      <td>82.610855</td>\n",
       "      <td>7.363824</td>\n",
       "      <td>9.003562</td>\n",
       "      <td>1200.826926</td>\n",
       "      <td>...</td>\n",
       "      <td>22.993827</td>\n",
       "      <td>-501.559663</td>\n",
       "      <td>20.029144</td>\n",
       "      <td>-500.000662</td>\n",
       "      <td>18.012723</td>\n",
       "      <td>-500.024764</td>\n",
       "      <td>13.016445</td>\n",
       "      <td>-500.058432</td>\n",
       "      <td>19.973767</td>\n",
       "      <td>-501.394155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-12-09 17:59:59</td>\n",
       "      <td>5.145949</td>\n",
       "      <td>6.084374</td>\n",
       "      <td>4.768124</td>\n",
       "      <td>36.808874</td>\n",
       "      <td>539.713765</td>\n",
       "      <td>77.984784</td>\n",
       "      <td>6.927072</td>\n",
       "      <td>8.955597</td>\n",
       "      <td>1199.292489</td>\n",
       "      <td>...</td>\n",
       "      <td>23.032807</td>\n",
       "      <td>-501.287889</td>\n",
       "      <td>19.977466</td>\n",
       "      <td>-500.159903</td>\n",
       "      <td>17.980463</td>\n",
       "      <td>-500.504602</td>\n",
       "      <td>12.949071</td>\n",
       "      <td>-500.009937</td>\n",
       "      <td>20.010332</td>\n",
       "      <td>-508.337973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-12-09 18:59:59</td>\n",
       "      <td>5.735249</td>\n",
       "      <td>6.165220</td>\n",
       "      <td>4.512346</td>\n",
       "      <td>37.810642</td>\n",
       "      <td>558.713584</td>\n",
       "      <td>86.434874</td>\n",
       "      <td>7.823471</td>\n",
       "      <td>7.490356</td>\n",
       "      <td>1198.005449</td>\n",
       "      <td>...</td>\n",
       "      <td>23.001911</td>\n",
       "      <td>-499.947838</td>\n",
       "      <td>20.023735</td>\n",
       "      <td>-499.713680</td>\n",
       "      <td>17.990955</td>\n",
       "      <td>-500.334769</td>\n",
       "      <td>13.007523</td>\n",
       "      <td>-499.968459</td>\n",
       "      <td>19.995999</td>\n",
       "      <td>-499.788805</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows √ó 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date  rougher.input.feed_au  rougher.input.feed_ag  \\\n",
       "0  2017-12-09 14:59:59               4.365491               6.158718   \n",
       "1  2017-12-09 15:59:59               4.362781               6.048130   \n",
       "2  2017-12-09 16:59:59               5.081681               6.082745   \n",
       "3  2017-12-09 17:59:59               5.145949               6.084374   \n",
       "4  2017-12-09 18:59:59               5.735249               6.165220   \n",
       "\n",
       "   rougher.input.feed_pb  rougher.input.feed_sol  rougher.input.feed_rate  \\\n",
       "0               3.875727               39.135119               555.820208   \n",
       "1               3.902537               39.713906               544.731687   \n",
       "2               4.564078               37.208683               558.155110   \n",
       "3               4.768124               36.808874               539.713765   \n",
       "4               4.512346               37.810642               558.713584   \n",
       "\n",
       "   rougher.input.feed_size  rougher.input.floatbank10_sulfate  \\\n",
       "0                94.544358                           6.146982   \n",
       "1               123.742430                           6.210119   \n",
       "2                82.610855                           7.363824   \n",
       "3                77.984784                           6.927072   \n",
       "4                86.434874                           7.823471   \n",
       "\n",
       "   rougher.input.floatbank10_xanthate  rougher.state.floatbank10_a_air  ...  \\\n",
       "0                            9.308612                      1196.238112  ...   \n",
       "1                            9.297709                      1201.904177  ...   \n",
       "2                            9.003562                      1200.826926  ...   \n",
       "3                            8.955597                      1199.292489  ...   \n",
       "4                            7.490356                      1198.005449  ...   \n",
       "\n",
       "   secondary_cleaner.state.floatbank4_a_air  \\\n",
       "0                                 23.018622   \n",
       "1                                 23.024963   \n",
       "2                                 22.993827   \n",
       "3                                 23.032807   \n",
       "4                                 23.001911   \n",
       "\n",
       "   secondary_cleaner.state.floatbank4_a_level  \\\n",
       "0                                 -500.492702   \n",
       "1                                 -501.153409   \n",
       "2                                 -501.559663   \n",
       "3                                 -501.287889   \n",
       "4                                 -499.947838   \n",
       "\n",
       "   secondary_cleaner.state.floatbank4_b_air  \\\n",
       "0                                 20.020205   \n",
       "1                                 20.054122   \n",
       "2                                 20.029144   \n",
       "3                                 19.977466   \n",
       "4                                 20.023735   \n",
       "\n",
       "   secondary_cleaner.state.floatbank4_b_level  \\\n",
       "0                                 -500.220296   \n",
       "1                                 -500.314711   \n",
       "2                                 -500.000662   \n",
       "3                                 -500.159903   \n",
       "4                                 -499.713680   \n",
       "\n",
       "   secondary_cleaner.state.floatbank5_a_air  \\\n",
       "0                                 17.963512   \n",
       "1                                 17.979515   \n",
       "2                                 18.012723   \n",
       "3                                 17.980463   \n",
       "4                                 17.990955   \n",
       "\n",
       "   secondary_cleaner.state.floatbank5_a_level  \\\n",
       "0                                 -499.939490   \n",
       "1                                 -499.272871   \n",
       "2                                 -500.024764   \n",
       "3                                 -500.504602   \n",
       "4                                 -500.334769   \n",
       "\n",
       "   secondary_cleaner.state.floatbank5_b_air  \\\n",
       "0                                 12.990306   \n",
       "1                                 12.992404   \n",
       "2                                 13.016445   \n",
       "3                                 12.949071   \n",
       "4                                 13.007523   \n",
       "\n",
       "   secondary_cleaner.state.floatbank5_b_level  \\\n",
       "0                                 -500.080993   \n",
       "1                                 -499.976268   \n",
       "2                                 -500.058432   \n",
       "3                                 -500.009937   \n",
       "4                                 -499.968459   \n",
       "\n",
       "   secondary_cleaner.state.floatbank6_a_air  \\\n",
       "0                                 19.990336   \n",
       "1                                 20.013986   \n",
       "2                                 19.973767   \n",
       "3                                 20.010332   \n",
       "4                                 19.995999   \n",
       "\n",
       "   secondary_cleaner.state.floatbank6_a_level  \n",
       "0                                 -499.191575  \n",
       "1                                 -500.625471  \n",
       "2                                 -501.394155  \n",
       "3                                 -508.337973  \n",
       "4                                 -499.788805  \n",
       "\n",
       "[5 rows x 53 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "for data in data_sets:\n",
    "    display(data.head())\n",
    "    print('*************************************************************************************')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19439 entries, 0 to 19438\n",
      "Data columns (total 87 columns):\n",
      " #   Column                                              Non-Null Count  Dtype  \n",
      "---  ------                                              --------------  -----  \n",
      " 0   date                                                19439 non-null  object \n",
      " 1   rougher.input.feed_au                               19439 non-null  float64\n",
      " 2   rougher.input.feed_ag                               19439 non-null  float64\n",
      " 3   rougher.input.feed_pb                               19339 non-null  float64\n",
      " 4   rougher.input.feed_sol                              19340 non-null  float64\n",
      " 5   rougher.input.feed_rate                             19428 non-null  float64\n",
      " 6   rougher.input.feed_size                             19294 non-null  float64\n",
      " 7   rougher.input.floatbank10_sulfate                   19405 non-null  float64\n",
      " 8   rougher.input.floatbank10_xanthate                  19431 non-null  float64\n",
      " 9   rougher.state.floatbank10_a_air                     19438 non-null  float64\n",
      " 10  rougher.state.floatbank10_a_level                   19438 non-null  float64\n",
      " 11  rougher.state.floatbank10_b_air                     19438 non-null  float64\n",
      " 12  rougher.state.floatbank10_b_level                   19438 non-null  float64\n",
      " 13  rougher.state.floatbank10_c_air                     19438 non-null  float64\n",
      " 14  rougher.state.floatbank10_c_level                   19438 non-null  float64\n",
      " 15  rougher.state.floatbank10_d_air                     19439 non-null  float64\n",
      " 16  rougher.state.floatbank10_d_level                   19439 non-null  float64\n",
      " 17  rougher.state.floatbank10_e_air                     19003 non-null  float64\n",
      " 18  rougher.state.floatbank10_e_level                   19439 non-null  float64\n",
      " 19  rougher.state.floatbank10_f_air                     19439 non-null  float64\n",
      " 20  rougher.state.floatbank10_f_level                   19439 non-null  float64\n",
      " 21  rougher.input.floatbank11_sulfate                   19395 non-null  float64\n",
      " 22  rougher.input.floatbank11_xanthate                  18986 non-null  float64\n",
      " 23  rougher.calculation.sulfate_to_au_concentrate       19437 non-null  float64\n",
      " 24  rougher.calculation.floatbank10_sulfate_to_au_feed  19437 non-null  float64\n",
      " 25  rougher.calculation.floatbank11_sulfate_to_au_feed  19437 non-null  float64\n",
      " 26  rougher.calculation.au_pb_ratio                     19439 non-null  float64\n",
      " 27  rougher.output.concentrate_au                       19439 non-null  float64\n",
      " 28  rougher.output.concentrate_ag                       19439 non-null  float64\n",
      " 29  rougher.output.concentrate_pb                       19439 non-null  float64\n",
      " 30  rougher.output.concentrate_sol                      19416 non-null  float64\n",
      " 31  rougher.output.recovery                             19439 non-null  float64\n",
      " 32  rougher.output.tail_au                              19439 non-null  float64\n",
      " 33  rougher.output.tail_ag                              19438 non-null  float64\n",
      " 34  rougher.output.tail_pb                              19439 non-null  float64\n",
      " 35  rougher.output.tail_sol                             19439 non-null  float64\n",
      " 36  primary_cleaner.input.sulfate                       19415 non-null  float64\n",
      " 37  primary_cleaner.input.depressant                    19402 non-null  float64\n",
      " 38  primary_cleaner.input.feed_size                     19439 non-null  float64\n",
      " 39  primary_cleaner.input.xanthate                      19335 non-null  float64\n",
      " 40  primary_cleaner.state.floatbank8_a_air              19435 non-null  float64\n",
      " 41  primary_cleaner.state.floatbank8_a_level            19438 non-null  float64\n",
      " 42  primary_cleaner.state.floatbank8_b_air              19435 non-null  float64\n",
      " 43  primary_cleaner.state.floatbank8_b_level            19438 non-null  float64\n",
      " 44  primary_cleaner.state.floatbank8_c_air              19437 non-null  float64\n",
      " 45  primary_cleaner.state.floatbank8_c_level            19438 non-null  float64\n",
      " 46  primary_cleaner.state.floatbank8_d_air              19436 non-null  float64\n",
      " 47  primary_cleaner.state.floatbank8_d_level            19438 non-null  float64\n",
      " 48  primary_cleaner.output.concentrate_au               19439 non-null  float64\n",
      " 49  primary_cleaner.output.concentrate_ag               19439 non-null  float64\n",
      " 50  primary_cleaner.output.concentrate_pb               19323 non-null  float64\n",
      " 51  primary_cleaner.output.concentrate_sol              19069 non-null  float64\n",
      " 52  primary_cleaner.output.tail_au                      19439 non-null  float64\n",
      " 53  primary_cleaner.output.tail_ag                      19435 non-null  float64\n",
      " 54  primary_cleaner.output.tail_pb                      19418 non-null  float64\n",
      " 55  primary_cleaner.output.tail_sol                     19377 non-null  float64\n",
      " 56  secondary_cleaner.state.floatbank2_a_air            19219 non-null  float64\n",
      " 57  secondary_cleaner.state.floatbank2_a_level          19438 non-null  float64\n",
      " 58  secondary_cleaner.state.floatbank2_b_air            19416 non-null  float64\n",
      " 59  secondary_cleaner.state.floatbank2_b_level          19438 non-null  float64\n",
      " 60  secondary_cleaner.state.floatbank3_a_air            19426 non-null  float64\n",
      " 61  secondary_cleaner.state.floatbank3_a_level          19438 non-null  float64\n",
      " 62  secondary_cleaner.state.floatbank3_b_air            19438 non-null  float64\n",
      " 63  secondary_cleaner.state.floatbank3_b_level          19438 non-null  float64\n",
      " 64  secondary_cleaner.state.floatbank4_a_air            19433 non-null  float64\n",
      " 65  secondary_cleaner.state.floatbank4_a_level          19438 non-null  float64\n",
      " 66  secondary_cleaner.state.floatbank4_b_air            19438 non-null  float64\n",
      " 67  secondary_cleaner.state.floatbank4_b_level          19438 non-null  float64\n",
      " 68  secondary_cleaner.state.floatbank5_a_air            19438 non-null  float64\n",
      " 69  secondary_cleaner.state.floatbank5_a_level          19438 non-null  float64\n",
      " 70  secondary_cleaner.state.floatbank5_b_air            19438 non-null  float64\n",
      " 71  secondary_cleaner.state.floatbank5_b_level          19438 non-null  float64\n",
      " 72  secondary_cleaner.state.floatbank6_a_air            19437 non-null  float64\n",
      " 73  secondary_cleaner.state.floatbank6_a_level          19438 non-null  float64\n",
      " 74  secondary_cleaner.output.tail_au                    19439 non-null  float64\n",
      " 75  secondary_cleaner.output.tail_ag                    19437 non-null  float64\n",
      " 76  secondary_cleaner.output.tail_pb                    19427 non-null  float64\n",
      " 77  secondary_cleaner.output.tail_sol                   17691 non-null  float64\n",
      " 78  final.output.concentrate_au                         19439 non-null  float64\n",
      " 79  final.output.concentrate_ag                         19438 non-null  float64\n",
      " 80  final.output.concentrate_pb                         19438 non-null  float64\n",
      " 81  final.output.concentrate_sol                        19228 non-null  float64\n",
      " 82  final.output.recovery                               19439 non-null  float64\n",
      " 83  final.output.tail_au                                19439 non-null  float64\n",
      " 84  final.output.tail_ag                                19438 non-null  float64\n",
      " 85  final.output.tail_pb                                19338 non-null  float64\n",
      " 86  final.output.tail_sol                               19433 non-null  float64\n",
      "dtypes: float64(86), object(1)\n",
      "memory usage: 12.9+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 14579 entries, 0 to 14578\n",
      "Data columns (total 87 columns):\n",
      " #   Column                                              Non-Null Count  Dtype  \n",
      "---  ------                                              --------------  -----  \n",
      " 0   date                                                14579 non-null  object \n",
      " 1   rougher.input.feed_au                               14579 non-null  float64\n",
      " 2   rougher.input.feed_ag                               14579 non-null  float64\n",
      " 3   rougher.input.feed_pb                               14507 non-null  float64\n",
      " 4   rougher.input.feed_sol                              14502 non-null  float64\n",
      " 5   rougher.input.feed_rate                             14572 non-null  float64\n",
      " 6   rougher.input.feed_size                             14478 non-null  float64\n",
      " 7   rougher.input.floatbank10_sulfate                   14548 non-null  float64\n",
      " 8   rougher.input.floatbank10_xanthate                  14572 non-null  float64\n",
      " 9   rougher.state.floatbank10_a_air                     14579 non-null  float64\n",
      " 10  rougher.state.floatbank10_a_level                   14579 non-null  float64\n",
      " 11  rougher.state.floatbank10_b_air                     14579 non-null  float64\n",
      " 12  rougher.state.floatbank10_b_level                   14579 non-null  float64\n",
      " 13  rougher.state.floatbank10_c_air                     14579 non-null  float64\n",
      " 14  rougher.state.floatbank10_c_level                   14579 non-null  float64\n",
      " 15  rougher.state.floatbank10_d_air                     14579 non-null  float64\n",
      " 16  rougher.state.floatbank10_d_level                   14579 non-null  float64\n",
      " 17  rougher.state.floatbank10_e_air                     14150 non-null  float64\n",
      " 18  rougher.state.floatbank10_e_level                   14579 non-null  float64\n",
      " 19  rougher.state.floatbank10_f_air                     14579 non-null  float64\n",
      " 20  rougher.state.floatbank10_f_level                   14579 non-null  float64\n",
      " 21  rougher.input.floatbank11_sulfate                   14543 non-null  float64\n",
      " 22  rougher.input.floatbank11_xanthate                  14172 non-null  float64\n",
      " 23  rougher.calculation.sulfate_to_au_concentrate       14578 non-null  float64\n",
      " 24  rougher.calculation.floatbank10_sulfate_to_au_feed  14578 non-null  float64\n",
      " 25  rougher.calculation.floatbank11_sulfate_to_au_feed  14578 non-null  float64\n",
      " 26  rougher.calculation.au_pb_ratio                     14579 non-null  float64\n",
      " 27  rougher.output.concentrate_au                       14579 non-null  float64\n",
      " 28  rougher.output.concentrate_ag                       14579 non-null  float64\n",
      " 29  rougher.output.concentrate_pb                       14579 non-null  float64\n",
      " 30  rougher.output.concentrate_sol                      14561 non-null  float64\n",
      " 31  rougher.output.recovery                             14579 non-null  float64\n",
      " 32  rougher.output.tail_au                              14579 non-null  float64\n",
      " 33  rougher.output.tail_ag                              14578 non-null  float64\n",
      " 34  rougher.output.tail_pb                              14579 non-null  float64\n",
      " 35  rougher.output.tail_sol                             14579 non-null  float64\n",
      " 36  primary_cleaner.input.sulfate                       14556 non-null  float64\n",
      " 37  primary_cleaner.input.depressant                    14551 non-null  float64\n",
      " 38  primary_cleaner.input.feed_size                     14579 non-null  float64\n",
      " 39  primary_cleaner.input.xanthate                      14518 non-null  float64\n",
      " 40  primary_cleaner.state.floatbank8_a_air              14576 non-null  float64\n",
      " 41  primary_cleaner.state.floatbank8_a_level            14579 non-null  float64\n",
      " 42  primary_cleaner.state.floatbank8_b_air              14576 non-null  float64\n",
      " 43  primary_cleaner.state.floatbank8_b_level            14579 non-null  float64\n",
      " 44  primary_cleaner.state.floatbank8_c_air              14579 non-null  float64\n",
      " 45  primary_cleaner.state.floatbank8_c_level            14579 non-null  float64\n",
      " 46  primary_cleaner.state.floatbank8_d_air              14578 non-null  float64\n",
      " 47  primary_cleaner.state.floatbank8_d_level            14579 non-null  float64\n",
      " 48  primary_cleaner.output.concentrate_au               14579 non-null  float64\n",
      " 49  primary_cleaner.output.concentrate_ag               14579 non-null  float64\n",
      " 50  primary_cleaner.output.concentrate_pb               14491 non-null  float64\n",
      " 51  primary_cleaner.output.concentrate_sol              14314 non-null  float64\n",
      " 52  primary_cleaner.output.tail_au                      14579 non-null  float64\n",
      " 53  primary_cleaner.output.tail_ag                      14575 non-null  float64\n",
      " 54  primary_cleaner.output.tail_pb                      14573 non-null  float64\n",
      " 55  primary_cleaner.output.tail_sol                     14534 non-null  float64\n",
      " 56  secondary_cleaner.state.floatbank2_a_air            14485 non-null  float64\n",
      " 57  secondary_cleaner.state.floatbank2_a_level          14579 non-null  float64\n",
      " 58  secondary_cleaner.state.floatbank2_b_air            14557 non-null  float64\n",
      " 59  secondary_cleaner.state.floatbank2_b_level          14579 non-null  float64\n",
      " 60  secondary_cleaner.state.floatbank3_a_air            14567 non-null  float64\n",
      " 61  secondary_cleaner.state.floatbank3_a_level          14579 non-null  float64\n",
      " 62  secondary_cleaner.state.floatbank3_b_air            14579 non-null  float64\n",
      " 63  secondary_cleaner.state.floatbank3_b_level          14579 non-null  float64\n",
      " 64  secondary_cleaner.state.floatbank4_a_air            14574 non-null  float64\n",
      " 65  secondary_cleaner.state.floatbank4_a_level          14579 non-null  float64\n",
      " 66  secondary_cleaner.state.floatbank4_b_air            14579 non-null  float64\n",
      " 67  secondary_cleaner.state.floatbank4_b_level          14579 non-null  float64\n",
      " 68  secondary_cleaner.state.floatbank5_a_air            14579 non-null  float64\n",
      " 69  secondary_cleaner.state.floatbank5_a_level          14579 non-null  float64\n",
      " 70  secondary_cleaner.state.floatbank5_b_air            14579 non-null  float64\n",
      " 71  secondary_cleaner.state.floatbank5_b_level          14579 non-null  float64\n",
      " 72  secondary_cleaner.state.floatbank6_a_air            14578 non-null  float64\n",
      " 73  secondary_cleaner.state.floatbank6_a_level          14579 non-null  float64\n",
      " 74  secondary_cleaner.output.tail_au                    14579 non-null  float64\n",
      " 75  secondary_cleaner.output.tail_ag                    14578 non-null  float64\n",
      " 76  secondary_cleaner.output.tail_pb                    14575 non-null  float64\n",
      " 77  secondary_cleaner.output.tail_sol                   13659 non-null  float64\n",
      " 78  final.output.concentrate_au                         14579 non-null  float64\n",
      " 79  final.output.concentrate_ag                         14578 non-null  float64\n",
      " 80  final.output.concentrate_pb                         14578 non-null  float64\n",
      " 81  final.output.concentrate_sol                        14387 non-null  float64\n",
      " 82  final.output.recovery                               14579 non-null  float64\n",
      " 83  final.output.tail_au                                14579 non-null  float64\n",
      " 84  final.output.tail_ag                                14578 non-null  float64\n",
      " 85  final.output.tail_pb                                14504 non-null  float64\n",
      " 86  final.output.tail_sol                               14574 non-null  float64\n",
      "dtypes: float64(86), object(1)\n",
      "memory usage: 9.7+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4860 entries, 0 to 4859\n",
      "Data columns (total 53 columns):\n",
      " #   Column                                      Non-Null Count  Dtype  \n",
      "---  ------                                      --------------  -----  \n",
      " 0   date                                        4860 non-null   object \n",
      " 1   rougher.input.feed_au                       4860 non-null   float64\n",
      " 2   rougher.input.feed_ag                       4860 non-null   float64\n",
      " 3   rougher.input.feed_pb                       4832 non-null   float64\n",
      " 4   rougher.input.feed_sol                      4838 non-null   float64\n",
      " 5   rougher.input.feed_rate                     4856 non-null   float64\n",
      " 6   rougher.input.feed_size                     4816 non-null   float64\n",
      " 7   rougher.input.floatbank10_sulfate           4857 non-null   float64\n",
      " 8   rougher.input.floatbank10_xanthate          4859 non-null   float64\n",
      " 9   rougher.state.floatbank10_a_air             4859 non-null   float64\n",
      " 10  rougher.state.floatbank10_a_level           4859 non-null   float64\n",
      " 11  rougher.state.floatbank10_b_air             4859 non-null   float64\n",
      " 12  rougher.state.floatbank10_b_level           4859 non-null   float64\n",
      " 13  rougher.state.floatbank10_c_air             4859 non-null   float64\n",
      " 14  rougher.state.floatbank10_c_level           4859 non-null   float64\n",
      " 15  rougher.state.floatbank10_d_air             4860 non-null   float64\n",
      " 16  rougher.state.floatbank10_d_level           4860 non-null   float64\n",
      " 17  rougher.state.floatbank10_e_air             4853 non-null   float64\n",
      " 18  rougher.state.floatbank10_e_level           4860 non-null   float64\n",
      " 19  rougher.state.floatbank10_f_air             4860 non-null   float64\n",
      " 20  rougher.state.floatbank10_f_level           4860 non-null   float64\n",
      " 21  rougher.input.floatbank11_sulfate           4852 non-null   float64\n",
      " 22  rougher.input.floatbank11_xanthate          4814 non-null   float64\n",
      " 23  primary_cleaner.input.sulfate               4859 non-null   float64\n",
      " 24  primary_cleaner.input.depressant            4851 non-null   float64\n",
      " 25  primary_cleaner.input.feed_size             4860 non-null   float64\n",
      " 26  primary_cleaner.input.xanthate              4817 non-null   float64\n",
      " 27  primary_cleaner.state.floatbank8_a_air      4859 non-null   float64\n",
      " 28  primary_cleaner.state.floatbank8_a_level    4859 non-null   float64\n",
      " 29  primary_cleaner.state.floatbank8_b_air      4859 non-null   float64\n",
      " 30  primary_cleaner.state.floatbank8_b_level    4859 non-null   float64\n",
      " 31  primary_cleaner.state.floatbank8_c_air      4858 non-null   float64\n",
      " 32  primary_cleaner.state.floatbank8_c_level    4859 non-null   float64\n",
      " 33  primary_cleaner.state.floatbank8_d_air      4858 non-null   float64\n",
      " 34  primary_cleaner.state.floatbank8_d_level    4859 non-null   float64\n",
      " 35  secondary_cleaner.state.floatbank2_a_air    4734 non-null   float64\n",
      " 36  secondary_cleaner.state.floatbank2_a_level  4859 non-null   float64\n",
      " 37  secondary_cleaner.state.floatbank2_b_air    4859 non-null   float64\n",
      " 38  secondary_cleaner.state.floatbank2_b_level  4859 non-null   float64\n",
      " 39  secondary_cleaner.state.floatbank3_a_air    4859 non-null   float64\n",
      " 40  secondary_cleaner.state.floatbank3_a_level  4859 non-null   float64\n",
      " 41  secondary_cleaner.state.floatbank3_b_air    4859 non-null   float64\n",
      " 42  secondary_cleaner.state.floatbank3_b_level  4859 non-null   float64\n",
      " 43  secondary_cleaner.state.floatbank4_a_air    4859 non-null   float64\n",
      " 44  secondary_cleaner.state.floatbank4_a_level  4859 non-null   float64\n",
      " 45  secondary_cleaner.state.floatbank4_b_air    4859 non-null   float64\n",
      " 46  secondary_cleaner.state.floatbank4_b_level  4859 non-null   float64\n",
      " 47  secondary_cleaner.state.floatbank5_a_air    4859 non-null   float64\n",
      " 48  secondary_cleaner.state.floatbank5_a_level  4859 non-null   float64\n",
      " 49  secondary_cleaner.state.floatbank5_b_air    4859 non-null   float64\n",
      " 50  secondary_cleaner.state.floatbank5_b_level  4859 non-null   float64\n",
      " 51  secondary_cleaner.state.floatbank6_a_air    4859 non-null   float64\n",
      " 52  secondary_cleaner.state.floatbank6_a_level  4859 non-null   float64\n",
      "dtypes: float64(52), object(1)\n",
      "memory usage: 2.0+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "for data in data_sets:\n",
    "    display(data.info())\n",
    "    print('*************************************************************************************')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rougher.input.feed_au</th>\n",
       "      <th>rougher.input.feed_ag</th>\n",
       "      <th>rougher.input.feed_pb</th>\n",
       "      <th>rougher.input.feed_sol</th>\n",
       "      <th>rougher.input.feed_rate</th>\n",
       "      <th>rougher.input.feed_size</th>\n",
       "      <th>rougher.input.floatbank10_sulfate</th>\n",
       "      <th>rougher.input.floatbank10_xanthate</th>\n",
       "      <th>rougher.state.floatbank10_a_air</th>\n",
       "      <th>rougher.state.floatbank10_a_level</th>\n",
       "      <th>...</th>\n",
       "      <th>secondary_cleaner.output.tail_sol</th>\n",
       "      <th>final.output.concentrate_au</th>\n",
       "      <th>final.output.concentrate_ag</th>\n",
       "      <th>final.output.concentrate_pb</th>\n",
       "      <th>final.output.concentrate_sol</th>\n",
       "      <th>final.output.recovery</th>\n",
       "      <th>final.output.tail_au</th>\n",
       "      <th>final.output.tail_ag</th>\n",
       "      <th>final.output.tail_pb</th>\n",
       "      <th>final.output.tail_sol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>19439.000000</td>\n",
       "      <td>19439.000000</td>\n",
       "      <td>19339.000000</td>\n",
       "      <td>19340.000000</td>\n",
       "      <td>19428.000000</td>\n",
       "      <td>19294.000000</td>\n",
       "      <td>19405.000000</td>\n",
       "      <td>19431.000000</td>\n",
       "      <td>19438.000000</td>\n",
       "      <td>19438.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>17691.000000</td>\n",
       "      <td>19439.000000</td>\n",
       "      <td>19438.000000</td>\n",
       "      <td>19438.000000</td>\n",
       "      <td>19228.000000</td>\n",
       "      <td>19439.000000</td>\n",
       "      <td>19439.000000</td>\n",
       "      <td>19438.000000</td>\n",
       "      <td>19338.000000</td>\n",
       "      <td>19433.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.266097</td>\n",
       "      <td>8.794927</td>\n",
       "      <td>3.598085</td>\n",
       "      <td>36.695114</td>\n",
       "      <td>478.320042</td>\n",
       "      <td>58.970310</td>\n",
       "      <td>12.334373</td>\n",
       "      <td>6.021474</td>\n",
       "      <td>1105.315068</td>\n",
       "      <td>-376.610690</td>\n",
       "      <td>...</td>\n",
       "      <td>7.167247</td>\n",
       "      <td>44.076513</td>\n",
       "      <td>5.168470</td>\n",
       "      <td>9.978895</td>\n",
       "      <td>9.501224</td>\n",
       "      <td>67.050208</td>\n",
       "      <td>3.042467</td>\n",
       "      <td>9.688589</td>\n",
       "      <td>2.705795</td>\n",
       "      <td>10.583728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.955092</td>\n",
       "      <td>1.936847</td>\n",
       "      <td>1.049486</td>\n",
       "      <td>5.145445</td>\n",
       "      <td>105.373758</td>\n",
       "      <td>21.634478</td>\n",
       "      <td>3.427317</td>\n",
       "      <td>1.127263</td>\n",
       "      <td>160.826798</td>\n",
       "      <td>93.909667</td>\n",
       "      <td>...</td>\n",
       "      <td>3.916079</td>\n",
       "      <td>5.129784</td>\n",
       "      <td>1.372348</td>\n",
       "      <td>1.669240</td>\n",
       "      <td>2.787537</td>\n",
       "      <td>10.125840</td>\n",
       "      <td>0.922808</td>\n",
       "      <td>2.328642</td>\n",
       "      <td>0.949077</td>\n",
       "      <td>2.868782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.002986</td>\n",
       "      <td>0.046369</td>\n",
       "      <td>0.001083</td>\n",
       "      <td>0.000568</td>\n",
       "      <td>-0.042069</td>\n",
       "      <td>-657.949759</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.854384</td>\n",
       "      <td>7.237967</td>\n",
       "      <td>2.887280</td>\n",
       "      <td>34.207799</td>\n",
       "      <td>416.525453</td>\n",
       "      <td>47.435103</td>\n",
       "      <td>10.000362</td>\n",
       "      <td>5.398678</td>\n",
       "      <td>999.661867</td>\n",
       "      <td>-499.835165</td>\n",
       "      <td>...</td>\n",
       "      <td>3.845475</td>\n",
       "      <td>43.402215</td>\n",
       "      <td>4.251240</td>\n",
       "      <td>9.137262</td>\n",
       "      <td>7.722820</td>\n",
       "      <td>63.299712</td>\n",
       "      <td>2.461138</td>\n",
       "      <td>8.062878</td>\n",
       "      <td>2.040119</td>\n",
       "      <td>8.938947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.125839</td>\n",
       "      <td>8.593574</td>\n",
       "      <td>3.534895</td>\n",
       "      <td>37.202650</td>\n",
       "      <td>499.416120</td>\n",
       "      <td>54.610197</td>\n",
       "      <td>12.001174</td>\n",
       "      <td>6.008273</td>\n",
       "      <td>1001.072890</td>\n",
       "      <td>-300.263994</td>\n",
       "      <td>...</td>\n",
       "      <td>7.685827</td>\n",
       "      <td>45.011244</td>\n",
       "      <td>5.066094</td>\n",
       "      <td>10.102433</td>\n",
       "      <td>9.218961</td>\n",
       "      <td>68.172738</td>\n",
       "      <td>2.984909</td>\n",
       "      <td>9.743623</td>\n",
       "      <td>2.748730</td>\n",
       "      <td>10.622456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.769917</td>\n",
       "      <td>10.213771</td>\n",
       "      <td>4.244161</td>\n",
       "      <td>40.039133</td>\n",
       "      <td>550.172183</td>\n",
       "      <td>65.023044</td>\n",
       "      <td>14.716595</td>\n",
       "      <td>6.798051</td>\n",
       "      <td>1205.620588</td>\n",
       "      <td>-299.981998</td>\n",
       "      <td>...</td>\n",
       "      <td>10.411296</td>\n",
       "      <td>46.275313</td>\n",
       "      <td>5.895527</td>\n",
       "      <td>11.035769</td>\n",
       "      <td>10.947813</td>\n",
       "      <td>72.686642</td>\n",
       "      <td>3.571351</td>\n",
       "      <td>11.134294</td>\n",
       "      <td>3.333216</td>\n",
       "      <td>12.104271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>13.731330</td>\n",
       "      <td>14.596026</td>\n",
       "      <td>7.142594</td>\n",
       "      <td>53.477742</td>\n",
       "      <td>717.508837</td>\n",
       "      <td>484.967466</td>\n",
       "      <td>36.118275</td>\n",
       "      <td>9.703448</td>\n",
       "      <td>1521.980372</td>\n",
       "      <td>-273.776101</td>\n",
       "      <td>...</td>\n",
       "      <td>26.000772</td>\n",
       "      <td>52.756638</td>\n",
       "      <td>16.001945</td>\n",
       "      <td>17.031899</td>\n",
       "      <td>19.615720</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>8.245022</td>\n",
       "      <td>19.552149</td>\n",
       "      <td>5.804178</td>\n",
       "      <td>22.317730</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows √ó 86 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       rougher.input.feed_au  rougher.input.feed_ag  rougher.input.feed_pb  \\\n",
       "count           19439.000000           19439.000000           19339.000000   \n",
       "mean                8.266097               8.794927               3.598085   \n",
       "std                 1.955092               1.936847               1.049486   \n",
       "min                 0.010000               0.010000               0.010000   \n",
       "25%                 6.854384               7.237967               2.887280   \n",
       "50%                 8.125839               8.593574               3.534895   \n",
       "75%                 9.769917              10.213771               4.244161   \n",
       "max                13.731330              14.596026               7.142594   \n",
       "\n",
       "       rougher.input.feed_sol  rougher.input.feed_rate  \\\n",
       "count            19340.000000             19428.000000   \n",
       "mean                36.695114               478.320042   \n",
       "std                  5.145445               105.373758   \n",
       "min                  0.010000                 0.002986   \n",
       "25%                 34.207799               416.525453   \n",
       "50%                 37.202650               499.416120   \n",
       "75%                 40.039133               550.172183   \n",
       "max                 53.477742               717.508837   \n",
       "\n",
       "       rougher.input.feed_size  rougher.input.floatbank10_sulfate  \\\n",
       "count             19294.000000                       19405.000000   \n",
       "mean                 58.970310                          12.334373   \n",
       "std                  21.634478                           3.427317   \n",
       "min                   0.046369                           0.001083   \n",
       "25%                  47.435103                          10.000362   \n",
       "50%                  54.610197                          12.001174   \n",
       "75%                  65.023044                          14.716595   \n",
       "max                 484.967466                          36.118275   \n",
       "\n",
       "       rougher.input.floatbank10_xanthate  rougher.state.floatbank10_a_air  \\\n",
       "count                        19431.000000                     19438.000000   \n",
       "mean                             6.021474                      1105.315068   \n",
       "std                              1.127263                       160.826798   \n",
       "min                              0.000568                        -0.042069   \n",
       "25%                              5.398678                       999.661867   \n",
       "50%                              6.008273                      1001.072890   \n",
       "75%                              6.798051                      1205.620588   \n",
       "max                              9.703448                      1521.980372   \n",
       "\n",
       "       rougher.state.floatbank10_a_level  ...  \\\n",
       "count                       19438.000000  ...   \n",
       "mean                         -376.610690  ...   \n",
       "std                            93.909667  ...   \n",
       "min                          -657.949759  ...   \n",
       "25%                          -499.835165  ...   \n",
       "50%                          -300.263994  ...   \n",
       "75%                          -299.981998  ...   \n",
       "max                          -273.776101  ...   \n",
       "\n",
       "       secondary_cleaner.output.tail_sol  final.output.concentrate_au  \\\n",
       "count                       17691.000000                 19439.000000   \n",
       "mean                            7.167247                    44.076513   \n",
       "std                             3.916079                     5.129784   \n",
       "min                             0.000000                     0.000000   \n",
       "25%                             3.845475                    43.402215   \n",
       "50%                             7.685827                    45.011244   \n",
       "75%                            10.411296                    46.275313   \n",
       "max                            26.000772                    52.756638   \n",
       "\n",
       "       final.output.concentrate_ag  final.output.concentrate_pb  \\\n",
       "count                 19438.000000                 19438.000000   \n",
       "mean                      5.168470                     9.978895   \n",
       "std                       1.372348                     1.669240   \n",
       "min                       0.000000                     0.000000   \n",
       "25%                       4.251240                     9.137262   \n",
       "50%                       5.066094                    10.102433   \n",
       "75%                       5.895527                    11.035769   \n",
       "max                      16.001945                    17.031899   \n",
       "\n",
       "       final.output.concentrate_sol  final.output.recovery  \\\n",
       "count                  19228.000000           19439.000000   \n",
       "mean                       9.501224              67.050208   \n",
       "std                        2.787537              10.125840   \n",
       "min                        0.000000               0.000000   \n",
       "25%                        7.722820              63.299712   \n",
       "50%                        9.218961              68.172738   \n",
       "75%                       10.947813              72.686642   \n",
       "max                       19.615720             100.000000   \n",
       "\n",
       "       final.output.tail_au  final.output.tail_ag  final.output.tail_pb  \\\n",
       "count          19439.000000          19438.000000          19338.000000   \n",
       "mean               3.042467              9.688589              2.705795   \n",
       "std                0.922808              2.328642              0.949077   \n",
       "min                0.000000              0.000000              0.000000   \n",
       "25%                2.461138              8.062878              2.040119   \n",
       "50%                2.984909              9.743623              2.748730   \n",
       "75%                3.571351             11.134294              3.333216   \n",
       "max                8.245022             19.552149              5.804178   \n",
       "\n",
       "       final.output.tail_sol  \n",
       "count           19433.000000  \n",
       "mean               10.583728  \n",
       "std                 2.868782  \n",
       "min                 0.000000  \n",
       "25%                 8.938947  \n",
       "50%                10.622456  \n",
       "75%                12.104271  \n",
       "max                22.317730  \n",
       "\n",
       "[8 rows x 86 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rougher.input.feed_au</th>\n",
       "      <th>rougher.input.feed_ag</th>\n",
       "      <th>rougher.input.feed_pb</th>\n",
       "      <th>rougher.input.feed_sol</th>\n",
       "      <th>rougher.input.feed_rate</th>\n",
       "      <th>rougher.input.feed_size</th>\n",
       "      <th>rougher.input.floatbank10_sulfate</th>\n",
       "      <th>rougher.input.floatbank10_xanthate</th>\n",
       "      <th>rougher.state.floatbank10_a_air</th>\n",
       "      <th>rougher.state.floatbank10_a_level</th>\n",
       "      <th>...</th>\n",
       "      <th>secondary_cleaner.output.tail_sol</th>\n",
       "      <th>final.output.concentrate_au</th>\n",
       "      <th>final.output.concentrate_ag</th>\n",
       "      <th>final.output.concentrate_pb</th>\n",
       "      <th>final.output.concentrate_sol</th>\n",
       "      <th>final.output.recovery</th>\n",
       "      <th>final.output.tail_au</th>\n",
       "      <th>final.output.tail_ag</th>\n",
       "      <th>final.output.tail_pb</th>\n",
       "      <th>final.output.tail_sol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>14579.000000</td>\n",
       "      <td>14579.000000</td>\n",
       "      <td>14507.000000</td>\n",
       "      <td>14502.000000</td>\n",
       "      <td>14572.000000</td>\n",
       "      <td>14478.000000</td>\n",
       "      <td>14548.000000</td>\n",
       "      <td>14572.000000</td>\n",
       "      <td>14579.000000</td>\n",
       "      <td>14579.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>13659.000000</td>\n",
       "      <td>14579.000000</td>\n",
       "      <td>14578.000000</td>\n",
       "      <td>14578.000000</td>\n",
       "      <td>14387.000000</td>\n",
       "      <td>14579.000000</td>\n",
       "      <td>14579.000000</td>\n",
       "      <td>14578.000000</td>\n",
       "      <td>14504.000000</td>\n",
       "      <td>14574.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.352941</td>\n",
       "      <td>8.877460</td>\n",
       "      <td>3.604221</td>\n",
       "      <td>36.561420</td>\n",
       "      <td>474.332784</td>\n",
       "      <td>58.922712</td>\n",
       "      <td>12.427399</td>\n",
       "      <td>5.994854</td>\n",
       "      <td>1104.208278</td>\n",
       "      <td>-379.367166</td>\n",
       "      <td>...</td>\n",
       "      <td>7.111347</td>\n",
       "      <td>43.979499</td>\n",
       "      <td>5.192145</td>\n",
       "      <td>9.923809</td>\n",
       "      <td>9.566676</td>\n",
       "      <td>66.759066</td>\n",
       "      <td>3.087939</td>\n",
       "      <td>9.731972</td>\n",
       "      <td>2.719985</td>\n",
       "      <td>10.612745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.934376</td>\n",
       "      <td>1.922536</td>\n",
       "      <td>1.056063</td>\n",
       "      <td>5.209823</td>\n",
       "      <td>108.503552</td>\n",
       "      <td>22.407410</td>\n",
       "      <td>3.428939</td>\n",
       "      <td>1.152873</td>\n",
       "      <td>162.235606</td>\n",
       "      <td>94.652311</td>\n",
       "      <td>...</td>\n",
       "      <td>3.909951</td>\n",
       "      <td>5.471437</td>\n",
       "      <td>1.388014</td>\n",
       "      <td>1.706976</td>\n",
       "      <td>2.805654</td>\n",
       "      <td>10.619709</td>\n",
       "      <td>0.915187</td>\n",
       "      <td>2.358143</td>\n",
       "      <td>0.958929</td>\n",
       "      <td>2.871075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.002986</td>\n",
       "      <td>0.049194</td>\n",
       "      <td>0.001083</td>\n",
       "      <td>0.000568</td>\n",
       "      <td>-0.042069</td>\n",
       "      <td>-657.949759</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.932996</td>\n",
       "      <td>7.341922</td>\n",
       "      <td>2.880490</td>\n",
       "      <td>34.093951</td>\n",
       "      <td>411.048483</td>\n",
       "      <td>47.278490</td>\n",
       "      <td>10.002832</td>\n",
       "      <td>5.304167</td>\n",
       "      <td>999.644856</td>\n",
       "      <td>-499.861797</td>\n",
       "      <td>...</td>\n",
       "      <td>3.784897</td>\n",
       "      <td>43.345906</td>\n",
       "      <td>4.283347</td>\n",
       "      <td>9.103183</td>\n",
       "      <td>7.860030</td>\n",
       "      <td>63.114596</td>\n",
       "      <td>2.505287</td>\n",
       "      <td>8.088928</td>\n",
       "      <td>2.036512</td>\n",
       "      <td>9.013412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.225284</td>\n",
       "      <td>8.715859</td>\n",
       "      <td>3.532399</td>\n",
       "      <td>37.097511</td>\n",
       "      <td>498.187968</td>\n",
       "      <td>54.361187</td>\n",
       "      <td>12.003320</td>\n",
       "      <td>6.003053</td>\n",
       "      <td>1000.982624</td>\n",
       "      <td>-300.314199</td>\n",
       "      <td>...</td>\n",
       "      <td>7.629968</td>\n",
       "      <td>44.975014</td>\n",
       "      <td>5.118647</td>\n",
       "      <td>10.046455</td>\n",
       "      <td>9.301970</td>\n",
       "      <td>67.962788</td>\n",
       "      <td>3.029238</td>\n",
       "      <td>9.818512</td>\n",
       "      <td>2.774847</td>\n",
       "      <td>10.670515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.832210</td>\n",
       "      <td>10.255843</td>\n",
       "      <td>4.257282</td>\n",
       "      <td>39.899799</td>\n",
       "      <td>549.586552</td>\n",
       "      <td>64.464926</td>\n",
       "      <td>14.929903</td>\n",
       "      <td>6.796632</td>\n",
       "      <td>1292.663971</td>\n",
       "      <td>-299.989315</td>\n",
       "      <td>...</td>\n",
       "      <td>10.367050</td>\n",
       "      <td>46.275153</td>\n",
       "      <td>5.925380</td>\n",
       "      <td>10.981203</td>\n",
       "      <td>11.001573</td>\n",
       "      <td>72.598187</td>\n",
       "      <td>3.614098</td>\n",
       "      <td>11.169187</td>\n",
       "      <td>3.353845</td>\n",
       "      <td>12.130827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>13.731330</td>\n",
       "      <td>14.596026</td>\n",
       "      <td>7.052325</td>\n",
       "      <td>53.475325</td>\n",
       "      <td>717.508837</td>\n",
       "      <td>484.967466</td>\n",
       "      <td>36.118275</td>\n",
       "      <td>9.703448</td>\n",
       "      <td>1512.299531</td>\n",
       "      <td>-273.776101</td>\n",
       "      <td>...</td>\n",
       "      <td>26.000772</td>\n",
       "      <td>52.756638</td>\n",
       "      <td>16.001945</td>\n",
       "      <td>16.705297</td>\n",
       "      <td>19.423912</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>8.245022</td>\n",
       "      <td>19.552149</td>\n",
       "      <td>5.804178</td>\n",
       "      <td>22.317730</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows √ó 86 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       rougher.input.feed_au  rougher.input.feed_ag  rougher.input.feed_pb  \\\n",
       "count           14579.000000           14579.000000           14507.000000   \n",
       "mean                8.352941               8.877460               3.604221   \n",
       "std                 1.934376               1.922536               1.056063   \n",
       "min                 0.010000               0.010000               0.010000   \n",
       "25%                 6.932996               7.341922               2.880490   \n",
       "50%                 8.225284               8.715859               3.532399   \n",
       "75%                 9.832210              10.255843               4.257282   \n",
       "max                13.731330              14.596026               7.052325   \n",
       "\n",
       "       rougher.input.feed_sol  rougher.input.feed_rate  \\\n",
       "count            14502.000000             14572.000000   \n",
       "mean                36.561420               474.332784   \n",
       "std                  5.209823               108.503552   \n",
       "min                  0.010000                 0.002986   \n",
       "25%                 34.093951               411.048483   \n",
       "50%                 37.097511               498.187968   \n",
       "75%                 39.899799               549.586552   \n",
       "max                 53.475325               717.508837   \n",
       "\n",
       "       rougher.input.feed_size  rougher.input.floatbank10_sulfate  \\\n",
       "count             14478.000000                       14548.000000   \n",
       "mean                 58.922712                          12.427399   \n",
       "std                  22.407410                           3.428939   \n",
       "min                   0.049194                           0.001083   \n",
       "25%                  47.278490                          10.002832   \n",
       "50%                  54.361187                          12.003320   \n",
       "75%                  64.464926                          14.929903   \n",
       "max                 484.967466                          36.118275   \n",
       "\n",
       "       rougher.input.floatbank10_xanthate  rougher.state.floatbank10_a_air  \\\n",
       "count                        14572.000000                     14579.000000   \n",
       "mean                             5.994854                      1104.208278   \n",
       "std                              1.152873                       162.235606   \n",
       "min                              0.000568                        -0.042069   \n",
       "25%                              5.304167                       999.644856   \n",
       "50%                              6.003053                      1000.982624   \n",
       "75%                              6.796632                      1292.663971   \n",
       "max                              9.703448                      1512.299531   \n",
       "\n",
       "       rougher.state.floatbank10_a_level  ...  \\\n",
       "count                       14579.000000  ...   \n",
       "mean                         -379.367166  ...   \n",
       "std                            94.652311  ...   \n",
       "min                          -657.949759  ...   \n",
       "25%                          -499.861797  ...   \n",
       "50%                          -300.314199  ...   \n",
       "75%                          -299.989315  ...   \n",
       "max                          -273.776101  ...   \n",
       "\n",
       "       secondary_cleaner.output.tail_sol  final.output.concentrate_au  \\\n",
       "count                       13659.000000                 14579.000000   \n",
       "mean                            7.111347                    43.979499   \n",
       "std                             3.909951                     5.471437   \n",
       "min                             0.000000                     0.000000   \n",
       "25%                             3.784897                    43.345906   \n",
       "50%                             7.629968                    44.975014   \n",
       "75%                            10.367050                    46.275153   \n",
       "max                            26.000772                    52.756638   \n",
       "\n",
       "       final.output.concentrate_ag  final.output.concentrate_pb  \\\n",
       "count                 14578.000000                 14578.000000   \n",
       "mean                      5.192145                     9.923809   \n",
       "std                       1.388014                     1.706976   \n",
       "min                       0.000000                     0.000000   \n",
       "25%                       4.283347                     9.103183   \n",
       "50%                       5.118647                    10.046455   \n",
       "75%                       5.925380                    10.981203   \n",
       "max                      16.001945                    16.705297   \n",
       "\n",
       "       final.output.concentrate_sol  final.output.recovery  \\\n",
       "count                  14387.000000           14579.000000   \n",
       "mean                       9.566676              66.759066   \n",
       "std                        2.805654              10.619709   \n",
       "min                        0.000000               0.000000   \n",
       "25%                        7.860030              63.114596   \n",
       "50%                        9.301970              67.962788   \n",
       "75%                       11.001573              72.598187   \n",
       "max                       19.423912             100.000000   \n",
       "\n",
       "       final.output.tail_au  final.output.tail_ag  final.output.tail_pb  \\\n",
       "count          14579.000000          14578.000000          14504.000000   \n",
       "mean               3.087939              9.731972              2.719985   \n",
       "std                0.915187              2.358143              0.958929   \n",
       "min                0.000000              0.000000              0.000000   \n",
       "25%                2.505287              8.088928              2.036512   \n",
       "50%                3.029238              9.818512              2.774847   \n",
       "75%                3.614098             11.169187              3.353845   \n",
       "max                8.245022             19.552149              5.804178   \n",
       "\n",
       "       final.output.tail_sol  \n",
       "count           14574.000000  \n",
       "mean               10.612745  \n",
       "std                 2.871075  \n",
       "min                 0.000000  \n",
       "25%                 9.013412  \n",
       "50%                10.670515  \n",
       "75%                12.130827  \n",
       "max                22.317730  \n",
       "\n",
       "[8 rows x 86 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rougher.input.feed_au</th>\n",
       "      <th>rougher.input.feed_ag</th>\n",
       "      <th>rougher.input.feed_pb</th>\n",
       "      <th>rougher.input.feed_sol</th>\n",
       "      <th>rougher.input.feed_rate</th>\n",
       "      <th>rougher.input.feed_size</th>\n",
       "      <th>rougher.input.floatbank10_sulfate</th>\n",
       "      <th>rougher.input.floatbank10_xanthate</th>\n",
       "      <th>rougher.state.floatbank10_a_air</th>\n",
       "      <th>rougher.state.floatbank10_a_level</th>\n",
       "      <th>...</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_a_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_a_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_b_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank4_b_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_a_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_a_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_b_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank5_b_level</th>\n",
       "      <th>secondary_cleaner.state.floatbank6_a_air</th>\n",
       "      <th>secondary_cleaner.state.floatbank6_a_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4860.000000</td>\n",
       "      <td>4860.000000</td>\n",
       "      <td>4832.000000</td>\n",
       "      <td>4838.000000</td>\n",
       "      <td>4856.000000</td>\n",
       "      <td>4816.000000</td>\n",
       "      <td>4857.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.859000e+03</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4.859000e+03</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "      <td>4859.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.005584</td>\n",
       "      <td>8.547348</td>\n",
       "      <td>3.579662</td>\n",
       "      <td>37.095864</td>\n",
       "      <td>490.285103</td>\n",
       "      <td>59.113400</td>\n",
       "      <td>12.055735</td>\n",
       "      <td>6.101308</td>\n",
       "      <td>1108.635895</td>\n",
       "      <td>-368.340127</td>\n",
       "      <td>...</td>\n",
       "      <td>1.985770e+01</td>\n",
       "      <td>-488.665140</td>\n",
       "      <td>1.557025e+01</td>\n",
       "      <td>-464.176507</td>\n",
       "      <td>16.594103</td>\n",
       "      <td>-490.815250</td>\n",
       "      <td>12.945971</td>\n",
       "      <td>-489.583564</td>\n",
       "      <td>19.053888</td>\n",
       "      <td>-504.678924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.993590</td>\n",
       "      <td>1.958601</td>\n",
       "      <td>1.029377</td>\n",
       "      <td>4.926284</td>\n",
       "      <td>94.371623</td>\n",
       "      <td>19.125122</td>\n",
       "      <td>3.407642</td>\n",
       "      <td>1.042754</td>\n",
       "      <td>156.493143</td>\n",
       "      <td>91.155929</td>\n",
       "      <td>...</td>\n",
       "      <td>5.913105e+00</td>\n",
       "      <td>44.392714</td>\n",
       "      <td>4.927361e+00</td>\n",
       "      <td>65.706994</td>\n",
       "      <td>5.724305</td>\n",
       "      <td>32.258443</td>\n",
       "      <td>5.533176</td>\n",
       "      <td>37.084609</td>\n",
       "      <td>5.548996</td>\n",
       "      <td>38.690186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.012786</td>\n",
       "      <td>0.046369</td>\n",
       "      <td>0.018907</td>\n",
       "      <td>0.015783</td>\n",
       "      <td>300.792494</td>\n",
       "      <td>-600.568138</td>\n",
       "      <td>...</td>\n",
       "      <td>1.079872e-16</td>\n",
       "      <td>-799.704969</td>\n",
       "      <td>2.489718e-17</td>\n",
       "      <td>-799.860767</td>\n",
       "      <td>-0.371498</td>\n",
       "      <td>-797.142475</td>\n",
       "      <td>1.358469</td>\n",
       "      <td>-800.006180</td>\n",
       "      <td>0.160386</td>\n",
       "      <td>-809.734800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.574363</td>\n",
       "      <td>6.975898</td>\n",
       "      <td>2.903612</td>\n",
       "      <td>34.510841</td>\n",
       "      <td>434.099695</td>\n",
       "      <td>47.596984</td>\n",
       "      <td>9.890429</td>\n",
       "      <td>5.499808</td>\n",
       "      <td>999.715729</td>\n",
       "      <td>-499.731972</td>\n",
       "      <td>...</td>\n",
       "      <td>1.501123e+01</td>\n",
       "      <td>-500.704004</td>\n",
       "      <td>1.202172e+01</td>\n",
       "      <td>-500.196517</td>\n",
       "      <td>11.073822</td>\n",
       "      <td>-500.483564</td>\n",
       "      <td>9.011890</td>\n",
       "      <td>-500.129913</td>\n",
       "      <td>14.963953</td>\n",
       "      <td>-500.668501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.812923</td>\n",
       "      <td>8.179714</td>\n",
       "      <td>3.540772</td>\n",
       "      <td>37.499761</td>\n",
       "      <td>502.118742</td>\n",
       "      <td>55.509481</td>\n",
       "      <td>11.997859</td>\n",
       "      <td>6.099805</td>\n",
       "      <td>1001.414798</td>\n",
       "      <td>-300.181367</td>\n",
       "      <td>...</td>\n",
       "      <td>1.996807e+01</td>\n",
       "      <td>-499.892919</td>\n",
       "      <td>1.501240e+01</td>\n",
       "      <td>-499.540776</td>\n",
       "      <td>16.631195</td>\n",
       "      <td>-499.873136</td>\n",
       "      <td>11.999417</td>\n",
       "      <td>-499.955304</td>\n",
       "      <td>19.960006</td>\n",
       "      <td>-500.033769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.556589</td>\n",
       "      <td>10.084339</td>\n",
       "      <td>4.199847</td>\n",
       "      <td>40.461315</td>\n",
       "      <td>555.596563</td>\n",
       "      <td>66.661547</td>\n",
       "      <td>14.496072</td>\n",
       "      <td>6.802101</td>\n",
       "      <td>1202.837565</td>\n",
       "      <td>-299.961547</td>\n",
       "      <td>...</td>\n",
       "      <td>2.498900e+01</td>\n",
       "      <td>-498.652030</td>\n",
       "      <td>1.999949e+01</td>\n",
       "      <td>-400.302329</td>\n",
       "      <td>19.983191</td>\n",
       "      <td>-498.852815</td>\n",
       "      <td>15.004198</td>\n",
       "      <td>-499.643776</td>\n",
       "      <td>24.974583</td>\n",
       "      <td>-499.460134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>13.417156</td>\n",
       "      <td>14.533698</td>\n",
       "      <td>7.142594</td>\n",
       "      <td>53.477742</td>\n",
       "      <td>702.523396</td>\n",
       "      <td>363.989699</td>\n",
       "      <td>30.010759</td>\n",
       "      <td>9.396928</td>\n",
       "      <td>1521.980372</td>\n",
       "      <td>-281.039299</td>\n",
       "      <td>...</td>\n",
       "      <td>3.008450e+01</td>\n",
       "      <td>-383.373053</td>\n",
       "      <td>2.398898e+01</td>\n",
       "      <td>-114.250832</td>\n",
       "      <td>33.215996</td>\n",
       "      <td>-288.963521</td>\n",
       "      <td>24.177106</td>\n",
       "      <td>-141.934397</td>\n",
       "      <td>32.028529</td>\n",
       "      <td>-104.427459</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows √ó 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       rougher.input.feed_au  rougher.input.feed_ag  rougher.input.feed_pb  \\\n",
       "count            4860.000000            4860.000000            4832.000000   \n",
       "mean                8.005584               8.547348               3.579662   \n",
       "std                 1.993590               1.958601               1.029377   \n",
       "min                 0.010000               0.010000               0.010000   \n",
       "25%                 6.574363               6.975898               2.903612   \n",
       "50%                 7.812923               8.179714               3.540772   \n",
       "75%                 9.556589              10.084339               4.199847   \n",
       "max                13.417156              14.533698               7.142594   \n",
       "\n",
       "       rougher.input.feed_sol  rougher.input.feed_rate  \\\n",
       "count             4838.000000              4856.000000   \n",
       "mean                37.095864               490.285103   \n",
       "std                  4.926284                94.371623   \n",
       "min                  0.010000                 0.012786   \n",
       "25%                 34.510841               434.099695   \n",
       "50%                 37.499761               502.118742   \n",
       "75%                 40.461315               555.596563   \n",
       "max                 53.477742               702.523396   \n",
       "\n",
       "       rougher.input.feed_size  rougher.input.floatbank10_sulfate  \\\n",
       "count              4816.000000                        4857.000000   \n",
       "mean                 59.113400                          12.055735   \n",
       "std                  19.125122                           3.407642   \n",
       "min                   0.046369                           0.018907   \n",
       "25%                  47.596984                           9.890429   \n",
       "50%                  55.509481                          11.997859   \n",
       "75%                  66.661547                          14.496072   \n",
       "max                 363.989699                          30.010759   \n",
       "\n",
       "       rougher.input.floatbank10_xanthate  rougher.state.floatbank10_a_air  \\\n",
       "count                         4859.000000                      4859.000000   \n",
       "mean                             6.101308                      1108.635895   \n",
       "std                              1.042754                       156.493143   \n",
       "min                              0.015783                       300.792494   \n",
       "25%                              5.499808                       999.715729   \n",
       "50%                              6.099805                      1001.414798   \n",
       "75%                              6.802101                      1202.837565   \n",
       "max                              9.396928                      1521.980372   \n",
       "\n",
       "       rougher.state.floatbank10_a_level  ...  \\\n",
       "count                        4859.000000  ...   \n",
       "mean                         -368.340127  ...   \n",
       "std                            91.155929  ...   \n",
       "min                          -600.568138  ...   \n",
       "25%                          -499.731972  ...   \n",
       "50%                          -300.181367  ...   \n",
       "75%                          -299.961547  ...   \n",
       "max                          -281.039299  ...   \n",
       "\n",
       "       secondary_cleaner.state.floatbank4_a_air  \\\n",
       "count                              4.859000e+03   \n",
       "mean                               1.985770e+01   \n",
       "std                                5.913105e+00   \n",
       "min                                1.079872e-16   \n",
       "25%                                1.501123e+01   \n",
       "50%                                1.996807e+01   \n",
       "75%                                2.498900e+01   \n",
       "max                                3.008450e+01   \n",
       "\n",
       "       secondary_cleaner.state.floatbank4_a_level  \\\n",
       "count                                 4859.000000   \n",
       "mean                                  -488.665140   \n",
       "std                                     44.392714   \n",
       "min                                   -799.704969   \n",
       "25%                                   -500.704004   \n",
       "50%                                   -499.892919   \n",
       "75%                                   -498.652030   \n",
       "max                                   -383.373053   \n",
       "\n",
       "       secondary_cleaner.state.floatbank4_b_air  \\\n",
       "count                              4.859000e+03   \n",
       "mean                               1.557025e+01   \n",
       "std                                4.927361e+00   \n",
       "min                                2.489718e-17   \n",
       "25%                                1.202172e+01   \n",
       "50%                                1.501240e+01   \n",
       "75%                                1.999949e+01   \n",
       "max                                2.398898e+01   \n",
       "\n",
       "       secondary_cleaner.state.floatbank4_b_level  \\\n",
       "count                                 4859.000000   \n",
       "mean                                  -464.176507   \n",
       "std                                     65.706994   \n",
       "min                                   -799.860767   \n",
       "25%                                   -500.196517   \n",
       "50%                                   -499.540776   \n",
       "75%                                   -400.302329   \n",
       "max                                   -114.250832   \n",
       "\n",
       "       secondary_cleaner.state.floatbank5_a_air  \\\n",
       "count                               4859.000000   \n",
       "mean                                  16.594103   \n",
       "std                                    5.724305   \n",
       "min                                   -0.371498   \n",
       "25%                                   11.073822   \n",
       "50%                                   16.631195   \n",
       "75%                                   19.983191   \n",
       "max                                   33.215996   \n",
       "\n",
       "       secondary_cleaner.state.floatbank5_a_level  \\\n",
       "count                                 4859.000000   \n",
       "mean                                  -490.815250   \n",
       "std                                     32.258443   \n",
       "min                                   -797.142475   \n",
       "25%                                   -500.483564   \n",
       "50%                                   -499.873136   \n",
       "75%                                   -498.852815   \n",
       "max                                   -288.963521   \n",
       "\n",
       "       secondary_cleaner.state.floatbank5_b_air  \\\n",
       "count                               4859.000000   \n",
       "mean                                  12.945971   \n",
       "std                                    5.533176   \n",
       "min                                    1.358469   \n",
       "25%                                    9.011890   \n",
       "50%                                   11.999417   \n",
       "75%                                   15.004198   \n",
       "max                                   24.177106   \n",
       "\n",
       "       secondary_cleaner.state.floatbank5_b_level  \\\n",
       "count                                 4859.000000   \n",
       "mean                                  -489.583564   \n",
       "std                                     37.084609   \n",
       "min                                   -800.006180   \n",
       "25%                                   -500.129913   \n",
       "50%                                   -499.955304   \n",
       "75%                                   -499.643776   \n",
       "max                                   -141.934397   \n",
       "\n",
       "       secondary_cleaner.state.floatbank6_a_air  \\\n",
       "count                               4859.000000   \n",
       "mean                                  19.053888   \n",
       "std                                    5.548996   \n",
       "min                                    0.160386   \n",
       "25%                                   14.963953   \n",
       "50%                                   19.960006   \n",
       "75%                                   24.974583   \n",
       "max                                   32.028529   \n",
       "\n",
       "       secondary_cleaner.state.floatbank6_a_level  \n",
       "count                                 4859.000000  \n",
       "mean                                  -504.678924  \n",
       "std                                     38.690186  \n",
       "min                                   -809.734800  \n",
       "25%                                   -500.668501  \n",
       "50%                                   -500.033769  \n",
       "75%                                   -499.460134  \n",
       "max                                   -104.427459  \n",
       "\n",
       "[8 rows x 52 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "for data in data_sets:\n",
    "    display(data.describe())\n",
    "    print('*************************************************************************************')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date                      0.000000\n",
       "rougher.input.feed_au     0.000000\n",
       "rougher.input.feed_ag     0.000000\n",
       "rougher.input.feed_pb     0.005144\n",
       "rougher.input.feed_sol    0.005093\n",
       "                            ...   \n",
       "final.output.recovery     0.000000\n",
       "final.output.tail_au      0.000000\n",
       "final.output.tail_ag      0.000051\n",
       "final.output.tail_pb      0.005196\n",
       "final.output.tail_sol     0.000309\n",
       "Length: 87, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "date                      0.000000\n",
       "rougher.input.feed_au     0.000000\n",
       "rougher.input.feed_ag     0.000000\n",
       "rougher.input.feed_pb     0.004939\n",
       "rougher.input.feed_sol    0.005282\n",
       "                            ...   \n",
       "final.output.recovery     0.000000\n",
       "final.output.tail_au      0.000000\n",
       "final.output.tail_ag      0.000069\n",
       "final.output.tail_pb      0.005144\n",
       "final.output.tail_sol     0.000343\n",
       "Length: 87, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "date                                          0.000000\n",
       "rougher.input.feed_au                         0.000000\n",
       "rougher.input.feed_ag                         0.000000\n",
       "rougher.input.feed_pb                         0.005761\n",
       "rougher.input.feed_sol                        0.004527\n",
       "rougher.input.feed_rate                       0.000823\n",
       "rougher.input.feed_size                       0.009053\n",
       "rougher.input.floatbank10_sulfate             0.000617\n",
       "rougher.input.floatbank10_xanthate            0.000206\n",
       "rougher.state.floatbank10_a_air               0.000206\n",
       "rougher.state.floatbank10_a_level             0.000206\n",
       "rougher.state.floatbank10_b_air               0.000206\n",
       "rougher.state.floatbank10_b_level             0.000206\n",
       "rougher.state.floatbank10_c_air               0.000206\n",
       "rougher.state.floatbank10_c_level             0.000206\n",
       "rougher.state.floatbank10_d_air               0.000000\n",
       "rougher.state.floatbank10_d_level             0.000000\n",
       "rougher.state.floatbank10_e_air               0.001440\n",
       "rougher.state.floatbank10_e_level             0.000000\n",
       "rougher.state.floatbank10_f_air               0.000000\n",
       "rougher.state.floatbank10_f_level             0.000000\n",
       "rougher.input.floatbank11_sulfate             0.001646\n",
       "rougher.input.floatbank11_xanthate            0.009465\n",
       "primary_cleaner.input.sulfate                 0.000206\n",
       "primary_cleaner.input.depressant              0.001852\n",
       "primary_cleaner.input.feed_size               0.000000\n",
       "primary_cleaner.input.xanthate                0.008848\n",
       "primary_cleaner.state.floatbank8_a_air        0.000206\n",
       "primary_cleaner.state.floatbank8_a_level      0.000206\n",
       "primary_cleaner.state.floatbank8_b_air        0.000206\n",
       "primary_cleaner.state.floatbank8_b_level      0.000206\n",
       "primary_cleaner.state.floatbank8_c_air        0.000412\n",
       "primary_cleaner.state.floatbank8_c_level      0.000206\n",
       "primary_cleaner.state.floatbank8_d_air        0.000412\n",
       "primary_cleaner.state.floatbank8_d_level      0.000206\n",
       "secondary_cleaner.state.floatbank2_a_air      0.025926\n",
       "secondary_cleaner.state.floatbank2_a_level    0.000206\n",
       "secondary_cleaner.state.floatbank2_b_air      0.000206\n",
       "secondary_cleaner.state.floatbank2_b_level    0.000206\n",
       "secondary_cleaner.state.floatbank3_a_air      0.000206\n",
       "secondary_cleaner.state.floatbank3_a_level    0.000206\n",
       "secondary_cleaner.state.floatbank3_b_air      0.000206\n",
       "secondary_cleaner.state.floatbank3_b_level    0.000206\n",
       "secondary_cleaner.state.floatbank4_a_air      0.000206\n",
       "secondary_cleaner.state.floatbank4_a_level    0.000206\n",
       "secondary_cleaner.state.floatbank4_b_air      0.000206\n",
       "secondary_cleaner.state.floatbank4_b_level    0.000206\n",
       "secondary_cleaner.state.floatbank5_a_air      0.000206\n",
       "secondary_cleaner.state.floatbank5_a_level    0.000206\n",
       "secondary_cleaner.state.floatbank5_b_air      0.000206\n",
       "secondary_cleaner.state.floatbank5_b_level    0.000206\n",
       "secondary_cleaner.state.floatbank6_a_air      0.000206\n",
       "secondary_cleaner.state.floatbank6_a_level    0.000206\n",
       "dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "for data in data_sets:\n",
    "    display(data.isna().mean())\n",
    "    print('*************************************************************************************')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í –∏—Å—Ö–æ–¥–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ—Å–µ–¥–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Å—Ç–æ –ø–æ—Ö–æ–∂–∏, –∑–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä—è–¥—É –º–µ—Ç–æ–¥–æ–º ffill."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "for data in data_sets:\n",
    "  data.bfill(axis='rows', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date                      0.0\n",
       "rougher.input.feed_au     0.0\n",
       "rougher.input.feed_ag     0.0\n",
       "rougher.input.feed_pb     0.0\n",
       "rougher.input.feed_sol    0.0\n",
       "                         ... \n",
       "final.output.recovery     0.0\n",
       "final.output.tail_au      0.0\n",
       "final.output.tail_ag      0.0\n",
       "final.output.tail_pb      0.0\n",
       "final.output.tail_sol     0.0\n",
       "Length: 87, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "date                      0.0\n",
       "rougher.input.feed_au     0.0\n",
       "rougher.input.feed_ag     0.0\n",
       "rougher.input.feed_pb     0.0\n",
       "rougher.input.feed_sol    0.0\n",
       "                         ... \n",
       "final.output.recovery     0.0\n",
       "final.output.tail_au      0.0\n",
       "final.output.tail_ag      0.0\n",
       "final.output.tail_pb      0.0\n",
       "final.output.tail_sol     0.0\n",
       "Length: 87, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "date                                          0.0\n",
       "rougher.input.feed_au                         0.0\n",
       "rougher.input.feed_ag                         0.0\n",
       "rougher.input.feed_pb                         0.0\n",
       "rougher.input.feed_sol                        0.0\n",
       "rougher.input.feed_rate                       0.0\n",
       "rougher.input.feed_size                       0.0\n",
       "rougher.input.floatbank10_sulfate             0.0\n",
       "rougher.input.floatbank10_xanthate            0.0\n",
       "rougher.state.floatbank10_a_air               0.0\n",
       "rougher.state.floatbank10_a_level             0.0\n",
       "rougher.state.floatbank10_b_air               0.0\n",
       "rougher.state.floatbank10_b_level             0.0\n",
       "rougher.state.floatbank10_c_air               0.0\n",
       "rougher.state.floatbank10_c_level             0.0\n",
       "rougher.state.floatbank10_d_air               0.0\n",
       "rougher.state.floatbank10_d_level             0.0\n",
       "rougher.state.floatbank10_e_air               0.0\n",
       "rougher.state.floatbank10_e_level             0.0\n",
       "rougher.state.floatbank10_f_air               0.0\n",
       "rougher.state.floatbank10_f_level             0.0\n",
       "rougher.input.floatbank11_sulfate             0.0\n",
       "rougher.input.floatbank11_xanthate            0.0\n",
       "primary_cleaner.input.sulfate                 0.0\n",
       "primary_cleaner.input.depressant              0.0\n",
       "primary_cleaner.input.feed_size               0.0\n",
       "primary_cleaner.input.xanthate                0.0\n",
       "primary_cleaner.state.floatbank8_a_air        0.0\n",
       "primary_cleaner.state.floatbank8_a_level      0.0\n",
       "primary_cleaner.state.floatbank8_b_air        0.0\n",
       "primary_cleaner.state.floatbank8_b_level      0.0\n",
       "primary_cleaner.state.floatbank8_c_air        0.0\n",
       "primary_cleaner.state.floatbank8_c_level      0.0\n",
       "primary_cleaner.state.floatbank8_d_air        0.0\n",
       "primary_cleaner.state.floatbank8_d_level      0.0\n",
       "secondary_cleaner.state.floatbank2_a_air      0.0\n",
       "secondary_cleaner.state.floatbank2_a_level    0.0\n",
       "secondary_cleaner.state.floatbank2_b_air      0.0\n",
       "secondary_cleaner.state.floatbank2_b_level    0.0\n",
       "secondary_cleaner.state.floatbank3_a_air      0.0\n",
       "secondary_cleaner.state.floatbank3_a_level    0.0\n",
       "secondary_cleaner.state.floatbank3_b_air      0.0\n",
       "secondary_cleaner.state.floatbank3_b_level    0.0\n",
       "secondary_cleaner.state.floatbank4_a_air      0.0\n",
       "secondary_cleaner.state.floatbank4_a_level    0.0\n",
       "secondary_cleaner.state.floatbank4_b_air      0.0\n",
       "secondary_cleaner.state.floatbank4_b_level    0.0\n",
       "secondary_cleaner.state.floatbank5_a_air      0.0\n",
       "secondary_cleaner.state.floatbank5_a_level    0.0\n",
       "secondary_cleaner.state.floatbank5_b_air      0.0\n",
       "secondary_cleaner.state.floatbank5_b_level    0.0\n",
       "secondary_cleaner.state.floatbank6_a_air      0.0\n",
       "secondary_cleaner.state.floatbank6_a_level    0.0\n",
       "dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************\n"
     ]
    }
   ],
   "source": [
    "for data in data_sets:\n",
    "    display(data.isna().mean())\n",
    "    print('*************************************************************')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –î—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç—Ä–æ–∫"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*************************************************************\n"
     ]
    }
   ],
   "source": [
    "for data in data_sets:\n",
    "    display(data.duplicated().sum())\n",
    "    print('*************************************************************')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### –°–æ–¥–µ—Ä–∂—Ä–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò–∑ –ø—É–Ω–∫—Ç–∞ 5.4.1.3 –≤–∏–¥–Ω–æ, —á—Ç–æ –≤ –¢–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –º–µ–Ω—å—à–µ —Å—Ç–æ–ª–±—Ü–æ–≤."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'final.output.concentrate_ag',\n",
       " 'final.output.concentrate_au',\n",
       " 'final.output.concentrate_pb',\n",
       " 'final.output.concentrate_sol',\n",
       " 'final.output.recovery',\n",
       " 'final.output.tail_ag',\n",
       " 'final.output.tail_au',\n",
       " 'final.output.tail_pb',\n",
       " 'final.output.tail_sol',\n",
       " 'primary_cleaner.output.concentrate_ag',\n",
       " 'primary_cleaner.output.concentrate_au',\n",
       " 'primary_cleaner.output.concentrate_pb',\n",
       " 'primary_cleaner.output.concentrate_sol',\n",
       " 'primary_cleaner.output.tail_ag',\n",
       " 'primary_cleaner.output.tail_au',\n",
       " 'primary_cleaner.output.tail_pb',\n",
       " 'primary_cleaner.output.tail_sol',\n",
       " 'rougher.calculation.au_pb_ratio',\n",
       " 'rougher.calculation.floatbank10_sulfate_to_au_feed',\n",
       " 'rougher.calculation.floatbank11_sulfate_to_au_feed',\n",
       " 'rougher.calculation.sulfate_to_au_concentrate',\n",
       " 'rougher.output.concentrate_ag',\n",
       " 'rougher.output.concentrate_au',\n",
       " 'rougher.output.concentrate_pb',\n",
       " 'rougher.output.concentrate_sol',\n",
       " 'rougher.output.recovery',\n",
       " 'rougher.output.tail_ag',\n",
       " 'rougher.output.tail_au',\n",
       " 'rougher.output.tail_pb',\n",
       " 'rougher.output.tail_sol',\n",
       " 'secondary_cleaner.output.tail_ag',\n",
       " 'secondary_cleaner.output.tail_au',\n",
       " 'secondary_cleaner.output.tail_pb',\n",
       " 'secondary_cleaner.output.tail_sol'}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# –Ω–∞–π–¥–µ–º —Å—Ç–æ–ª–±—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ\n",
    "set(train.columns)-set(test.columns) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ. –í —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–∞–¥–∏–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∞ –Ω–µ —Å—ã—Ä—å—è), —Ä–∞—Å—á–µ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ä–∞–∑–Ω—ã–º —ç—Ç–∞–ø–∞–º, —Ç.–µ –∑–Ω–∞—á–µ–Ω–∏—è `final.output, primary_cleaner.output, rougher.calculations, rougher.output, secondary_cleaner.output`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "    \n",
    "–í —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ (calculation) –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ (output) —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤–µ–¥—å –∏—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–∏–±–æ –∑–∞–º–µ—Ä–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –ó–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –§–æ—Ä–º—É–ª–∞ –æ–±–æ–≥–æ—â–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í –ø—É–Ω–∫—Ç–µ 3.2 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –æ–±–æ–≥–æ—â–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞, —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "C = train['rougher.output.concentrate_au'] # C - –¥–æ–ª—è –∑–æ–ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–µ –ø–æ—Å–ª–µ —Ñ–ª–æ—Ç–∞—Ü–∏–∏/–æ—á–∏—Å—Ç–∫–∏\n",
    "F = train['rougher.input.feed_au']         # F - –¥–æ–ª—è –∑–æ–ª–æ—Ç–∞ –≤ —Å—ã—Ä—å–µ/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–µ –¥–æ —Ñ–ª–æ—Ç–∞—Ü–∏–∏/–æ—á–∏—Å—Ç–∫–∏\n",
    "T = train['rougher.output.tail_au']        # T - –¥–æ–ª—è –∑–æ–ª–æ—Ç–∞ –≤ –æ—Ç–≤–∞–ª—å–Ω—ã—Ö —Ö–≤–æ—Å—Ç–∞—Ö –ø–æ—Å–ª–µ —Ñ–ª–æ—Ç–∞—Ü–∏–∏/–æ—á–∏—Å—Ç–∫–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "recovery = (C * (F - T)) / (F * (C - T)) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# –¥–æ–±–∞–≤–∏–º –≤ train –≤—ã–±–æ—Ä–∫—É —Å—Ç–æ–ª–±–µ—Ü —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n",
    "train['recovery'] = recovery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14579.000000\n",
       "mean        82.521200\n",
       "std         15.797521\n",
       "min         -0.000000\n",
       "25%         80.558542\n",
       "50%         85.946497\n",
       "75%         89.960375\n",
       "max        100.000000\n",
       "Name: recovery, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['recovery'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    14579.000000\n",
       "mean        82.521200\n",
       "std         15.797521\n",
       "min          0.000000\n",
       "25%         80.558542\n",
       "50%         85.946497\n",
       "75%         89.960375\n",
       "max        100.000000\n",
       "Name: rougher.output.recovery, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['rougher.output.recovery'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.83758577644259e-15"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(train['recovery'], train['rougher.output.recovery'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ó–Ω–∞—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–Ω—ã–º `Recovery` –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º `ougher.output.recovery` –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã. –¢–∞–∫–∂–µ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –Ω–∏–∑–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.\n",
    "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –¥–∞–ª–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω—É–∂–µ–Ω."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "    \n",
    "–¢–≤–æ–µ —Ä–∞—Å—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ `MAE` –≤–µ—Ä–Ω–æ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train.drop('recovery', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –§—É–Ω–∫—Ü–∏—è sMAPE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### sMAPE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò–∑ —É—Å–ª–æ–≤–∏–π –∑–∞–¥–∞—á–∏ –Ω–∞–º –∏–∑–≤–µ—Å—Ç–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ (—Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ 3.1), —Å–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ —Ä–∞—Å—á–µ—Ç—É."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def smape(target, predicted): #–Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∑–Ω–∞—á–µ–Ω–∏—è, —Ü–µ–ª–µ–≤–æ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π\n",
    "     #—Ç–∞–∫ –∫–∞–∫ –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è sMAPE, —Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —É–º–Ω–æ–∂–∏–º –Ω–∞ -1\n",
    "  return (1/len(target) * np.sum(2 * np.abs(target - predicted) / (np.abs(target) + np.abs(predicted))*100)) * (-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### final sMAPE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def smape_final(rougher, final): #–Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ —Å—ã—Ä—å–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤\n",
    "   #—Ç–∞–∫ –∫–∞–∫ –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ - –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è sMAPE, —Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —É–º–Ω–æ–∂–∏–º –Ω–∞ -1\n",
    "  return (0.25*rougher + 0.75*final) * (-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "\n",
    "–§—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í —Ö–æ–¥–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–≤:\n",
    "- –ó–æ–ª–æ—Ç–æ (AU)\n",
    "- –°–µ—Ä–µ–±—Ä–æ (Ag)\n",
    "- –°–≤–∏–Ω–µ—Ü (Pb)\n",
    "\n",
    "–¶–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –æ—á–∏—Å—Ç–∫–∏. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_copy = full.copy(deep=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_copy = full_copy[['rougher.input.feed_ag', 'rougher.output.concentrate_ag', 'primary_cleaner.output.concentrate_ag', 'final.output.concentrate_ag', \\\n",
    "                       'rougher.input.feed_pb', 'rougher.output.concentrate_pb', 'primary_cleaner.output.concentrate_pb', 'final.output.concentrate_pb', \\\n",
    "                       'rougher.input.feed_au', 'rougher.output.concentrate_au', 'primary_cleaner.output.concentrate_au', 'final.output.concentrate_au', \\\n",
    "                       'rougher.input.feed_sol', 'rougher.output.concentrate_sol', 'primary_cleaner.output.concentrate_sol', 'final.output.concentrate_sol'\n",
    "                    ]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å—Ç–æ–ª–±—Ü—ã"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_copy = full_copy.rename(columns = {'rougher.output.concentrate_ag' : '–§–ª–æ—Ç–∞—Ü–∏—è –°–µ—Ä–µ–±—Ä–æ', \\\n",
    "                                        'primary_cleaner.output.concentrate_ag' : '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–µ—Ä–µ–±—Ä–æ', \\\n",
    "                                        'final.output.concentrate_ag' : '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–µ—Ä–µ–±—Ä–æ', \\\n",
    "                                        'rougher.output.concentrate_pb' : '–§–ª–æ—Ç–∞—Ü–∏—è –°–≤–∏–Ω–µ—Ü', \\\n",
    "                                        'primary_cleaner.output.concentrate_pb' : '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–≤–∏–Ω–µ—Ü', \\\n",
    "                                        'final.output.concentrate_pb' : '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–≤–∏–Ω–µ—Ü', \\\n",
    "                                        'rougher.output.concentrate_au' : '–§–ª–æ—Ç–∞—Ü–∏—è –ó–æ–ª–æ—Ç–æ', \\\n",
    "                                        'primary_cleaner.output.concentrate_au': '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ó–æ–ª–æ—Ç–æ', \\\n",
    "                                        'final.output.concentrate_au' : '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ó–æ–ª–æ—Ç–æ', \\\n",
    "                                        'rougher.output.concentrate_sol' : '–§–ª–æ—Ç–∞—Ü–∏—è Sol', \\\n",
    "                                        'primary_cleaner.output.concentrate_sol': '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Sol', \\\n",
    "                                        'final.output.concentrate_sol' : '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Sol', \\\n",
    "                                        'rougher.input.feed_ag' : '–°–µ—Ä–µ–±—Ä–æ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', \\\n",
    "                                        'rougher.input.feed_pb' : '–°–≤–∏–Ω–µ—Ü –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', \\\n",
    "                                        'rougher.input.feed_au' : '–ó–æ–ª–æ—Ç–æ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', \\\n",
    "                                        'rougher.input.feed_sol' : 'Sol –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ'\n",
    "                                       })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['–°–µ—Ä–µ–±—Ä–æ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è –°–µ—Ä–µ–±—Ä–æ',\n",
       "       '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–µ—Ä–µ–±—Ä–æ', '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–µ—Ä–µ–±—Ä–æ',\n",
       "       '–°–≤–∏–Ω–µ—Ü –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è –°–≤–∏–Ω–µ—Ü',\n",
       "       '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–≤–∏–Ω–µ—Ü', '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–≤–∏–Ω–µ—Ü',\n",
       "       '–ó–æ–ª–æ—Ç–æ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è –ó–æ–ª–æ—Ç–æ',\n",
       "       '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ó–æ–ª–æ—Ç–æ', '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ó–æ–ª–æ—Ç–æ',\n",
       "       'Sol –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è Sol', '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Sol',\n",
       "       '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Sol'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_copy.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_ag = full_copy[['–°–µ—Ä–µ–±—Ä–æ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è –°–µ—Ä–µ–±—Ä–æ', '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–µ—Ä–µ–±—Ä–æ', '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–µ—Ä–µ–±—Ä–æ']]\n",
    "data_pb = full_copy[['–°–≤–∏–Ω–µ—Ü –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è –°–≤–∏–Ω–µ—Ü','–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–≤–∏–Ω–µ—Ü', '–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –°–≤–∏–Ω–µ—Ü']]\n",
    "data_au = full_copy[['–ó–æ–ª–æ—Ç–æ –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è –ó–æ–ª–æ—Ç–æ', '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ó–æ–ª–æ—Ç–æ','–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ó–æ–ª–æ—Ç–æ']]\n",
    "data_sol = full_copy[['Sol –≤ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å—ã—Ä—å–µ', '–§–ª–æ—Ç–∞—Ü–∏—è Sol', '–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Sol','–í—Ç–æ—Ä–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Sol']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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eteLAEGB6niCws72BDW1SuNVghq0+QT75RfHBjM7i6CAeDpwJ0HzzhnAOeFzv+DuecDJBAXAvQmaghZqRPC/eo+gIAKCQoiNYe7flRTQ3d8jKLSaRlCQX4egVlAs/Yzt8vUVcxolHA+KzfPvsEBjZ2ZQQo3kYgNo5O0mc4lKeTz/C0Gt2W0EBc7Fa493JXiP1if4zBV/3+xwDCkLpfwsfuzuo0q5iZtKOX+pPu+lzL+z74ai/uzuOaXMvFthYfLRBJ/D4wlqWL4MHOvuxQuid/eeLvQowUAvSwmOCQUE773ddStRkp1t8y8Ex7T5BJ/1w9lFM/1duJLgYtafzGxQsedK+x4REZEibMfvMhERkeiZ2QIgy90vLOE5B+5w99tjWE8WQSHlRe7+fJmGFEkQYT+a8yFofh5tmtIpzfEghnX1JKhR+54HA5WUucq8rxOJvhtERCSRqRmviIjEq7+yY1PiQtdT+hqLIpKYyvJ4cARBFwy/2d2MIiIiIvFKhX0iIhKX3L2kfqEKn3ugAqOISBwry+NB2M1CaZtYi4iIiMQVNeMVERERERERERFJEBqgQ0REREREREREJEGosE9ERERERERERCRBqLBPREREREREREQkQaiwT0REREREREREJEGosE9ERERERERERCRBqLBPREREREREREQkQaiwT0REREREREREJEGosE9ERERERERERCRBqLBPREREREREREQkQaiwT0REREREREREJEGosE9ERERERERERCRBqLBPREREREREREQkQaiwT+KemaVGnUFEREREREREpDJQYZ/EHTOrZmb/MrMZZrYKmFiO23rJzH5VRuu6xsz+XRbrEhEREZGyYWaXm9kDZbSufc3s67JYl4hIWTCzNmbmZpYSdRaJHyrsk50ys3PNbJyZZZvZcjP7wMwOqoBNvwW0Ag5z98bu3qM8NmJm+wI9gbeLTR8UHix/X8pVPgWcZ2aNyyqjiEhZMrN0M5tuZk1jmPd2Mxu2i+fHmln3sk0oIvHEzOqa2SgzW2lmG8xsgZnda2bVos4WKzNLA24F7i42vWb4G/eD0qzP3acA683spDKMKSICgJkdZGZfh8fcdWb2lZntF3UuqXxU2CclMrMbgAeAfwCZBIVvjwKnlPN2BwHNgSHuvqI8twVcDgx3dy82/QJgHXB+aVbm7tuAD0q7nIjEvwgv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\n",
      "text/plain": [
       "<Figure size 1584x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, linewidth=3, figsize=(22, 6))    # 1 —Ä—è–¥, 3 –≥—Ä–∞—Ñ–∏–∫–∞\n",
    "\n",
    "data_ag.mean().plot(ax=ax1, subplots=True, grid=True)\n",
    "ax1.set_title('–°–µ—Ä–µ–±—Ä–æ (Ag)')\n",
    "ax1.set_ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–µ–±—Ä–∞')\n",
    "ax1.set_xlabel('–°—Ç–∞–¥–∏–∏ –æ—á–∏—Å—Ç–∫–∏')\n",
    "ax1.tick_params(axis='x', rotation=90)\n",
    "\n",
    "data_pb.mean().plot(ax=ax2, subplots=True, grid=True)\n",
    "ax2.set_title('–°–≤–∏–Ω–µ—Ü (Pb)')\n",
    "ax2.set_ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å–≤–∏–Ω—Ü–∞')\n",
    "ax2.set_xlabel('–°—Ç–∞–¥–∏–∏ –æ—á–∏—Å—Ç–∫–∏')\n",
    "ax2.tick_params(axis='x', rotation=90)\n",
    "\n",
    "data_au.mean().plot(ax=ax3, subplots=True, grid=True)\n",
    "ax3.set_title('–ó–æ–ª–æ—Ç–æ (Au)')\n",
    "ax3.set_ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∑–æ–ª–æ—Ç–∞')\n",
    "ax3.set_xlabel('–°—Ç–∞–¥–∏–∏ –æ—á–∏—Å—Ç–∫–∏')\n",
    "ax3.tick_params(axis='x', rotation=90)\n",
    "\n",
    "data_sol.mean().plot(ax=ax4, subplots=True, grid=True)\n",
    "ax4.set_title('Sol')\n",
    "ax4.set_ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è Sol')\n",
    "ax4.set_xlabel('–°—Ç–∞–¥–∏–∏ –æ—á–∏—Å—Ç–∫–∏')\n",
    "ax4.tick_params(axis='x', rotation=90)\n",
    "\n",
    "plt.suptitle('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ —ç—Ç–∞–ø–∞—Ö —Ñ–ª–æ—Ç–∞—Ü–∏–∏, –ø–µ—Ä–≤–∏—á–Ω–æ–π –∏ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏', fontweight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∏–¥–Ω–æ, —á—Ç–æ:\n",
    "- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—ã—Ä—å—è –∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ –æ—á–∏—â–µ–Ω–∏—è —Å–ø–ª–∞–≤–∞\n",
    "- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤–∏–Ω—Ü–∞ —Å–∏–ª—å–Ω–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –¥–æ –ø–µ—Ä–≤–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π\n",
    "- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–æ–ª–æ—Ç–∞ –≤ —Å–ø–ª–∞–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞—Å—Ç–µ—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n",
    "- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ Sol –∑–µ—Ä–∫–∞–ª—å–Ω–æ —Å–≤–∏–Ω—Ü—É, —Å–∏–ª—å–Ω–æ –ø–∞–¥–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —ç—Ç–∞–ø–µ –∏ –≤ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " <br/>\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"></h2>\n",
    "    \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    "\n",
    "</b> –¢—É—Ç –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å—ã—Ä—å–µ (rougher.input.feed_..). –î–æ–±–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br/>    \n",
    "<div class=\"alert alert-info\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: <a class=\"tocSkip\"> </h2> \n",
    "—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤—ã–≤–æ–¥—ã"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2 <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î–ª—è –∫–æ—Ä—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –º–µ–∂–¥—É –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏.  \n",
    "–û—Ü–µ–Ω–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è U-test –ú–∞–Ω–Ω–∞-–í–∏—Ç–Ω–∏."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def m_u_test(data_1, data_2):\n",
    "    stat, pvalue = mannwhitneyu (data_1, data_2, alternative='two-sided')\n",
    "    alpha = 0.05\n",
    "    return pvalue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "same = []\n",
    "not_same = []\n",
    "alpha = 0.05\n",
    "for col in test.columns[1:]:\n",
    "    if m_u_test(test[col], train[col]) < alpha:\n",
    "        same.append(col)\n",
    "    else:\n",
    "        not_same.append(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ü—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –±–∞–∑—ã Test –∏ Train –±—ã–ª–æ –≤—ã—è–≤–ª–µ–Ω–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:  \n",
      "- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ 44 —Å–ª—É—á–∞—è—Ö  \n",
      "- —Ä–∞–∑–Ω—ã–µ –≤ 8 —Å–ª—É—á–∞—è—Ö\n"
     ]
    }
   ],
   "source": [
    "print(f'''–ü—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –±–∞–∑—ã Test –∏ Train –±—ã–ª–æ –≤—ã—è–≤–ª–µ–Ω–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:  \n",
    "- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ {len(same)} —Å–ª—É—á–∞—è—Ö  \n",
    "- —Ä–∞–∑–Ω—ã–µ –≤ {len(not_same)} —Å–ª—É—á–∞—è—Ö''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–†–∞–∑–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–µ–ª–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã—è–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ ['rougher.input.feed_pb', 'rougher.state.floatbank10_e_air', 'primary_cleaner.input.feed_size', 'primary_cleaner.state.floatbank8_b_air', 'primary_cleaner.state.floatbank8_c_air', 'secondary_cleaner.state.floatbank2_a_level', 'secondary_cleaner.state.floatbank3_b_level', 'secondary_cleaner.state.floatbank6_a_air']\n"
     ]
    }
   ],
   "source": [
    "print(f'–†–∞–∑–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–µ–ª–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã—è–≤–ª–µ–Ω—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ {not_same}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –°—Ä–∞–≤–Ω–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞–Ω—É–ª —Å—ã—Ä—å—è –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['rougher.input.feed_size'].hist(bins=200, alpha=0.5, label='train', density=True)\n",
    "test['rougher.input.feed_size'].hist(bins=200, alpha=0.5, label='test', density=True)\n",
    "plt.xlabel('—Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü, –º–∫')\n",
    "plt.ylabel('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞–Ω—É–ª —Å—ã—Ä—å—è –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ\n"
     ]
    }
   ],
   "source": [
    "if m_u_test(train['rougher.input.feed_size'], test['rougher.input.feed_size']) < alpha:\n",
    "    print('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞–Ω—É–ª —Å—ã—Ä—å—è –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ')\n",
    "else:\n",
    "    print('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞–Ω—É–ª —Å—ã—Ä—å—è –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö —Ä–∞–∑–Ω–æ–µ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "\n",
    "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã. –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, –≤–º–µ—Å—Ç–æ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∞—è –≤—Å–µ—Ö –≤–µ—â–µ—Å—Ç–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö: –≤ —Å—ã—Ä—å–µ, –≤ —á–µ—Ä–Ω–æ–≤–æ–º –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Å—ã—Ä—å–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "rouhger_sum = full[['rougher.input.feed_ag', \n",
    "                   'rougher.input.feed_pb', \n",
    "                   'rougher.input.feed_sol', \n",
    "                   'rougher.input.feed_au']].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data=rouhger_sum, kde=True)\n",
    "plt.title('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ —Å—ã—Ä—å–µ–≤–æ–π —Å—Ç–∞–¥–∏–∏')\n",
    "plt.ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–ª–ª–æ–≤')\n",
    "plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–ª–ª–æ–≤')\n",
    "plt.tick_params(axis='x', rotation=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —á–µ—Ä–Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "concentrate_sum = full[['rougher.output.concentrate_pb', \n",
    "                   'rougher.output.concentrate_ag', \n",
    "                   'rougher.output.concentrate_sol', \n",
    "                   'rougher.output.concentrate_au']].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data=concentrate_sum, kde=True)\n",
    "plt.title('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ —á–µ—Ä–Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏')\n",
    "plt.ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–ª–ª–æ–≤')\n",
    "plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–ª–ª–æ–≤')\n",
    "plt.tick_params(axis='x', rotation=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –°—É–º–º–∞—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_sum = full[['final.output.concentrate_pb', \n",
    "                   'final.output.concentrate_ag', \n",
    "                   'final.output.concentrate_sol', \n",
    "                   'final.output.concentrate_au']].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data=final_sum, kde=True)\n",
    "plt.title('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏')\n",
    "plt.ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–∞–ª–ª–æ–≤')\n",
    "plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞–ª–ª–æ–≤')\n",
    "plt.tick_params(axis='x', rotation=30)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –í—ã–≤–æ–¥—ã –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –º–µ—Ç–∞–ª–ª–æ–≤"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ê–Ω–æ–º–∞–ª–∏–∏ –≤–∏–¥–Ω—ã –Ω–∞ —ç—Ç–∞–ø–∞—Ö —á–µ—Ä–Ω–æ–≤–æ–π –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–ª–∞–≤–∞ (–∑–Ω–∞—á–µ–Ω–∏—è –æ–∫–æ–ª–æ 0), —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –°—á–∏—Ç–∞—é —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Å—É–º–º–∞ –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ —ç—Ç–∞–ø–µ = 0, —Ç–∞–∫ –∫–∞–∫ –ª–∏–±–æ —ç—Ç–æ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –µ–º–∫–æ—Å—Ç–∏, —á—Ç–æ –≤—Ä–µ–¥–∏—Ç –∏—Å—Å–ª–µ–¥—É–º—ã–º –¥–∞–Ω–Ω—ã–º."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —Å—É–º–º–∞—Ä–Ω—É—é –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≤–µ—â–µ—Å—Ç–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–ª–∏ –∏ –Ω–∞—à–ª–∏ –∞–Ω–æ–º–∞–ª–∏–∏.\n",
    " \n",
    "–í–µ–¥—å –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–µ—â–µ—Å—Ç–≤—É –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å (–Ω–µ –≤—Å–µ–≥–¥–∞ –∂–µ –µ—Å—Ç—å –∫—Ä—É–ø–∏—Ü—ã –∑–æ–ª–æ—Ç–∞ –≤ —Ä—É–¥–µ), –∞ –≤–æ—Ç —Å—É–º–º–∞—Ä–Ω–æ - –≤—Ä—è–¥ –ª–∏ (–≤ —Ä—É–¥–µ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ –±—É–¥—É—Ç). –ê –µ—Å–ª–∏ –º—ã –∏–º–µ–µ–º –Ω–æ–ª—å, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö.\n",
    "    \n",
    "–û–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç —Ç–∞–∫–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(rouhger_sum == 0).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "394"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(concentrate_sum == 0).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(final_sum == 0).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–£–¥–∞–ª—è—Ç—å —Ç–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥–µ–º –≤ Train –∏ Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['concentrate_sum'] = train['rougher.output.concentrate_pb'] + train['rougher.output.concentrate_ag'] + train['rougher.output.concentrate_sol'] + train['rougher.output.concentrate_au']\n",
    "train = train.loc[train['concentrate_sum'] != 0]\n",
    "train = train.drop('concentrate_sum', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['final_sum'] = train['final.output.concentrate_pb'] + train['final.output.concentrate_ag'] + train['final.output.concentrate_sol'] + train['final.output.concentrate_au']\n",
    "train = train.loc[train['final_sum'] != 0]\n",
    "train = train.drop('final_sum', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò–∑ –ø—É–Ω–∫—Ç–∞ 5.4.2 –≤–∏–¥–Ω–æ, —á—Ç–æ –≤ Test –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# –ú–æ–¥–µ–ª—å"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ò–∑ –ø—É–Ω–∫—Ç–∞ 5.4.2 –∏–∑–≤–µ—Å—Ç–Ω–æ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ—Å—Ç–≤–æ–π –≤—ã–±–æ—Ä–∫–µ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>rougher.output.recovery</th>\n",
       "      <th>final.output.recovery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-01-15 00:00:00</td>\n",
       "      <td>87.107763</td>\n",
       "      <td>70.541216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-01-15 01:00:00</td>\n",
       "      <td>86.843261</td>\n",
       "      <td>69.266198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-01-15 02:00:00</td>\n",
       "      <td>86.842308</td>\n",
       "      <td>68.116445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-01-15 03:00:00</td>\n",
       "      <td>87.226430</td>\n",
       "      <td>68.347543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-01-15 04:00:00</td>\n",
       "      <td>86.688794</td>\n",
       "      <td>66.927016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date  rougher.output.recovery  final.output.recovery\n",
       "0  2016-01-15 00:00:00                87.107763              70.541216\n",
       "1  2016-01-15 01:00:00                86.843261              69.266198\n",
       "2  2016-01-15 02:00:00                86.842308              68.116445\n",
       "3  2016-01-15 03:00:00                87.226430              68.347543\n",
       "4  2016-01-15 04:00:00                86.688794              66.927016"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_target = full[['date', 'rougher.output.recovery', 'final.output.recovery']] # –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n",
    "df_target.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–¥–æ–±–∞–≤–∏–º —ç—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É –∏–∑ –ø–æ–ª–Ω–æ–π\n",
    "test = test.merge(df_target, how = 'left', on = 'date')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "    \n",
    "–í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ) –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –¥–∞—Ç–µ - –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# —É–¥–∞–ª–∏–º —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—É—á–∞–µ–º—É—é –º–æ–¥–µ–ª—å\n",
    "test.drop(['date'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# —É–¥–∞–ª–∏–º –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–π, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏\n",
    "train = train.drop(set(train.columns)-set(test.columns), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## –†–∞–∑–±–∏–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í—ã–¥–µ–ª–∏–º —Ñ–∏—á–∏ –∏ —Ç–∞—Ä–≥–µ—Ç—ã –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# –≤—ã–¥–µ–ª–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ (rougher)\n",
    "features_train_r = train.filter(regex='^rougher',axis=1)\n",
    "features_train_r = features_train_r.drop(['rougher.output.recovery'], axis=1)\n",
    "target_train_r = train['rougher.output.recovery']\n",
    "\n",
    "# –≤—ã–¥–µ–ª–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ (final)\n",
    "features_train_f = train.drop(['rougher.output.recovery', 'final.output.recovery'], axis=1)\n",
    "target_train_f = train['final.output.recovery']\n",
    "\n",
    "# –≤—ã–¥–µ–ª–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ (rougher)\n",
    "features_test_r = test.filter(regex='^rougher',axis=1)\n",
    "features_test_r = features_test_r.drop(['rougher.output.recovery'], axis=1)\n",
    "target_test_r = test['rougher.output.recovery']\n",
    "\n",
    "# –≤—ã–¥–µ–ª–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ (final)\n",
    "features_test_f = test.drop(['rougher.output.recovery', 'final.output.recovery'], axis=1)\n",
    "target_test_f = test['final.output.recovery']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–æ–∫"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14089, 22)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(14089,)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(14089, 52)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(14089,)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(4860, 22)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(4860,)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(4860, 52)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(4860,)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤\n",
    "display(features_train_r.shape)\n",
    "display(target_train_r.shape)\n",
    "\n",
    "display(features_train_f.shape)\n",
    "display(target_train_f.shape)\n",
    "\n",
    "display(features_test_r.shape)\n",
    "display(target_test_r.shape)\n",
    "\n",
    "display(features_test_f.shape)\n",
    "display(target_test_f.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–±–æ—Ä–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î–ª—è –Ω–∞—à–∏—Ö —Ü–µ–ª–µ–π, –∫–æ–≥–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–æ–π –ø–æ–¥–æ–π–¥—É—Ç –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:\n",
    "- –õ–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏\n",
    "- K –ë–ª–∏–∂–∞–π—à–∏—Ö –°–æ—Å–µ–¥–µ–π (KNN)\n",
    "- –ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –í–µ–∫—Ç–æ—Ä–æ–≤ (SVMs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE, —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –º–µ—Ç—Ä–∏–∫–∞ –±—É–¥–µ—Ç —É–º–Ω–æ–∂–∞—Ç—å—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ `-1` –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞–∏–±–æ–ª—å—à–∞—è –≤–µ–ª–∏—á–∏–Ω–∞."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 6.471035924366602\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 9.709372271525185\n",
      "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 8.899788184735538\n",
      "\n",
      "CPU times: user 1.26 s, sys: 1.44 s, total: 2.7 s\n",
      "Wall time: 2.68 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "scorer = make_scorer(smape)\n",
    "rougher_lin = cross_val_score(model_lr, features_train_r, target_train_r, scoring=scorer, cv=5)\n",
    "final_lin =  cross_val_score(model_lr, features_train_f, target_train_f, scoring=scorer, cv=5)\n",
    "print(f'''\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {rougher_lin.mean() * (-1)}\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {final_lin.mean() * (-1)}\n",
    "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: {smape_final(rougher_lin, final_lin).mean()}\n",
    "''')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### K –ë–ª–∏–∂–∞–π—à–∏—Ö –°–æ—Å–µ–¥–µ–π (KNN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_knn = KNeighborsRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 8.82096386933286\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 11.757402334367265\n",
      "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 11.023292718108664\n",
      "\n",
      "CPU times: user 4.57 s, sys: 5.23 s, total: 9.8 s\n",
      "Wall time: 10.8 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "scorer = make_scorer(smape)\n",
    "rougher_lin = cross_val_score(model_knn, features_train_r, target_train_r, scoring=scorer, cv=5)\n",
    "final_lin =  cross_val_score(model_knn, features_train_f, target_train_f, scoring=scorer, cv=5)\n",
    "print(f'''\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {rougher_lin.mean() * (-1)}\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {final_lin.mean() * (-1)}\n",
    "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: {smape_final(rougher_lin, final_lin).mean()}\n",
    "''')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –í–µ–∫—Ç–æ—Ä–æ–≤ (SVMs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_svm = svm.SVR()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 7.043312104542425\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 9.850220539528818\n",
      "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 9.14849343078222\n",
      "\n",
      "CPU times: user 1min 32s, sys: 1.83 s, total: 1min 33s\n",
      "Wall time: 1min 34s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "scorer = make_scorer(smape)\n",
    "rougher_lin = cross_val_score(model_svm, features_train_r, target_train_r, scoring=scorer, cv=5)\n",
    "final_lin =  cross_val_score(model_svm, features_train_f, target_train_f, scoring=scorer, cv=5)\n",
    "print(f'''\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {rougher_lin.mean() * (-1)}\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {final_lin.mean() * (-1)}\n",
    "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: {smape_final(rougher_lin, final_lin).mean()}\n",
    "''')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –†–µ–≥—Ä–µ—Å—Å–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_dtr = model2 = DecisionTreeRegressor(random_state=160891)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 9.21214862532496\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 16.005968670486638\n",
      "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 14.307513659196218\n",
      "\n",
      "CPU times: user 6.33 s, sys: 11.6 ms, total: 6.34 s\n",
      "Wall time: 6.35 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "scorer = make_scorer(smape)\n",
    "rougher_lin = cross_val_score(model_dtr, features_train_r, target_train_r, scoring=scorer, cv=5)\n",
    "final_lin = cross_val_score(model_dtr, features_train_f, target_train_f, scoring=scorer, cv=5)\n",
    "print(f'''\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {rougher_lin.mean() * (-1)}\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: {final_lin.mean() * (-1)}\n",
    "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: {smape_final(rougher_lin, final_lin).mean()}\n",
    "''')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í —Ö–æ–¥–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ 3 –º–æ–¥–µ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—É–Ω–∫—Ç–æ–º 8.2.1 –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n",
    "- –õ–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 6.471\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 9.709\n",
    "    - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 8.89\n",
    "- K –ë–ª–∏–∂–∞–π—à–∏—Ö –°–æ—Å–µ–¥–µ–π (KNN)\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 8.821\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 11.757\n",
    "    - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 11.023\n",
    "- –ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –í–µ–∫—Ç–æ—Ä–æ–≤ (SVMs)\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 7.043\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 9.850\n",
    "    - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 9.149\n",
    "- –ú–µ—Ç–æ–¥ —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π:\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 9.279\n",
    "    - –ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞: 15.795\n",
    "    - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 14.166"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–µ–¥–∏ –º–æ–¥–µ–ª–µ–π, –ø—Ä–æ–≤–µ—Ä–∏–º –µ–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "        \n",
    "–õ—É—á—à—É—é –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —Ö–æ—Ä–æ—à–æ)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í –ø—É–Ω–∫—Ç–µ 8.2.1 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#–∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≤—å—é\n",
    "#model_lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ —Ä–µ–≤—å—é 1\n",
    "# %%time \n",
    "\n",
    "# # –æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n",
    "# model_lr.fit(features_test_r, target_test_r)\n",
    "# test_predictions_r = model_lr.predict(features_test_r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 47.2 ms, sys: 74.3 ms, total: 121 ms\n",
      "Wall time: 78.6 ms\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "\n",
    "# –æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n",
    "model_lr.fit(features_train_r, target_train_r)\n",
    "test_predictions_r = model_lr.predict(features_test_r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "smape_test_r = smape(target_test_r, test_predictions_r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "## –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ —Ä–µ–≤—å—é 1\n",
    "#%%time\n",
    "\n",
    "# –æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n",
    "#model_lr.fit(features_test_f, target_test_f)\n",
    "#test_predictions_f = model_lr.predict(features_test_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 48 ms, sys: 104 ms, total: 152 ms\n",
      "Wall time: 180 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "# –æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n",
    "model_lr.fit(features_train_f, target_train_f)\n",
    "test_predictions_f = model_lr.predict(features_test_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "smape_test_f = smape(target_test_f, test_predictions_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: 4.806252171674988\n",
      "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: 8.10308968256581\n",
      "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: 7.278880304843105\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(f'''\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —á–µ—Ä–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {smape_test_r * (-1)}\n",
    "–ó–Ω–∞—á–µ–Ω–∏–µ sMAPE –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {smape_test_f * (-1)}\n",
    "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sMAPE: {smape_final(smape_test_r, smape_test_f).mean()}\n",
    "''')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br/>\n",
    "<div class=\"alert alert-block alert-danger\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"></h2>\n",
    "\n",
    "    \n",
    "<b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>\n",
    "    \n",
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É –≤ –æ–±—É—á–µ–Ω–∏–∏ –ª—é–±—ã—Ö –º–æ–¥–µ–ª–µ–π. –ù–∞–º —Å–ª–µ–¥—É–µ—Ç –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ –∏  –¥–∞–ª–µ–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º `predict` –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É. –ò—Å–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br/>    \n",
    "<div class=\"alert alert-info\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: <a class=\"tocSkip\"> </h2> \n",
    "—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –≤—ã—à–µ, –∞ —Ç–∞–∫-–∂–µ –≤ –≤—ã–≤–æ–¥–∞—Ö"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2 <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, —Å—Ä–∞–≤–Ω–∏–º —Å Dummy –º–æ–¥–µ–ª—å—é"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy_model_r = DummyRegressor(strategy=\"mean\")\n",
    "dummy_model_r.fit(features_train_r, target_train_r)\n",
    "test_predictions__dummy_r = dummy_model_r.predict(features_test_r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "smape_test__dummy_r = smape(target_test_r, test_predictions__dummy_r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy_model_f = DummyRegressor(strategy=\"mean\")\n",
    "dummy_model_f.fit(features_train_f, target_train_f)\n",
    "test_predictions_dummy_f = dummy_model_f.predict(features_test_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "smape_test_dummy_f = smape(target_test_f, test_predictions_dummy_f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "–ò—Ç–æ–≥–æ–≤–æ–µ sMAPE –¥–ª—è DummyRegressor: 8.4677873639743\n"
     ]
    }
   ],
   "source": [
    "print(f'–ò—Ç–æ–≥–æ–≤–æ–µ sMAPE –¥–ª—è DummyRegressor: {smape_final(smape_test__dummy_r, smape_test_dummy_f).mean()}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### –í—ã–≤–æ–¥—ã –ø–æ –º–æ–¥–µ–ª—è–º"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–ù–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å –ø–æ–º–æ—â—å—é –õ–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ `7.27`. \n",
    "–î–ª—è –∫–æ—Ä—Ä–µ—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ã–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ Dummy –º–æ–¥–µ–ª—å –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑–∞–ª `8.468` \n",
    "–ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥, —á—Ç–æ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ—á–Ω–µ–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 14%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>\n",
    "\n",
    "<b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> \n",
    "        \n",
    "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—à—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–π –º–æ–¥–µ–ª–∏ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π –¥–∞–º–º–∏ –º–æ–¥–µ–ª—å—é. –í –∫–∞–∂–¥–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏, –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–∞–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–í —Ö–æ–¥–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∑–æ–ª–æ—Ç–æ–¥–æ–±—ã—á–∏ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã —à–∞–≥–∏:\n",
    "- –ò–∑—É—á–µ–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n",
    "    - —Å–¥–µ–ª–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö\n",
    "    - –∏–∑—É—á–µ–Ω—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n",
    "- –ü—Ä–æ–≤–µ–¥–µ–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:\n",
    "    - –∏–∑—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —ç—Ç–∞–ø–∞—Ö\n",
    "    - –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞–Ω—É–ª –≤ —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å –ø–æ–º–æ–∑—å—é —Ç–µ—Å—Ç–∞ –ú–∞–Ω–Ω–∞ –£–∏—Ç–Ω–∏)\n",
    "    - –ò–∑—É—á–µ–Ω—ã —Å–æ–≤–æ–∫—É–ø–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö\n",
    "        - –≤—ã—è–≤–ª–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö(—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–≤ –±—ã–ª–æ 0), –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≤—ã–±–æ—Ä–∫–∏ Train\n",
    "- –ò–∑—É—á–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–∞—Ö Train –∏ Test \n",
    "- –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π\n",
    "- –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ –Ω–∞–∏–ª—É—á—à–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º - –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è\n",
    "- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é Dummy –º–æ–¥–µ–ª–∏"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "–°—á–∏—Ç–∞—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ—Ç–Ω–æ–π –∏ –¥–æ–ø—É—Ç—Å—Ç–∏—Ç—å –≤ —Ä–∞–±–æ—Ç—É –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    "\n",
    "\n",
    "<h2> –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class=\"tocSkip\"> </h2>    \n",
    "    \n",
    "  \n",
    "–£ –º–µ–Ω—è —Å–ª–æ–∂–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–µ–µ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ, —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–µ–ø–ª–æ—Ö–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç–∞–∫–∏–º –æ–±—ä–µ–º–Ω—ã–º –∏ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º. –ú–æ–ª–æ–¥–µ—Ü! –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∏–∑—É—á–µ–Ω –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í—Å–µ –∫—Ä–∞—Å–∏–≤–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –æ—Ü–µ–Ω–µ–Ω–æ –∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ. –û—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –º–Ω–æ–≥–æ–µ —É–¥–∞–ª–æ—Å—å –∫–∞–∫ –Ω–∞–¥–æ)\n",
    "    \n",
    "–û—Ç–º–µ—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞üôÇ:\n",
    "    \n",
    "- –≤ —Ö–æ–¥–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–º–æ–≥–∞—é—â–∏–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞;\n",
    "- –º–Ω–æ–≥–æ –∫—Ä–∞—Å–∏–≤—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Ö–æ—Ä–æ—à–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è;\n",
    "- –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n",
    "    \n",
    "–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–æ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –µ—â—ë —Ä–∞–∑ –≤–∑–≥–ª—è–Ω—É—Ç—å, –∏—Ö —è –æ–±–∑–Ω–∞—á–∏–ª —Ç–µ–±–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–æ —Ö–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ –º–æ–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, —á—Ç–æ–±—ã –¥–æ–≤–µ—Å—Ç–∏ –µ–≥–æ –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞.\n",
    "\n",
    " \n",
    "</div>\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br/>    \n",
    "<div class=\"alert alert-info\">\n",
    "<h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: <a class=\"tocSkip\"> </h2> \n",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—è–∂–µ–ª–æ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border:solid Chocolate 2px; padding: 40px\">\n",
    "\n",
    "\n",
    "<h2> –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ v.2 <a class=\"tocSkip\"> </h2>    \n",
    "    \n",
    "     \n",
    "  \n",
    "–¢–µ–ø–µ—Ä—å –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ. –ü—Ä–∏–Ω–∏–º–∞—é —Ä–∞–±–æ—Ç—É)\n",
    "    \n",
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ ML, —Ç–æ –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ç–µ–±–µ: \n",
    "    \n",
    "- –û—Ç–∫—Ä—ã—Ç—ã–π –∫—É—Ä—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: https://habr.com/ru/company/ods/blog/322626/   \n",
    "    \n",
    "- –ö–Ω–∏–∂–∫–∞ –æ—Ç –®–ê–î: https://academy.yandex.ru/handbook/ml/\n",
    "    \n",
    "- –¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ª–µ–∫—Ü–∏–∏ –æ—Ç Andrew Ng: https://www.youtube.com/watch?v=PPLop4L2eGk&list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN\n",
    "- –ò–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç <a href=\"https://towardsdatascience.com/pipeline-columntransformer-and-featureunion-explained-f5491f815f\">–∫–æ–Ω–≤–µ–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a>.     \n",
    "    \n",
    "- –ù–µ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–ª—å–∑—É –ø—Ä–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–∏. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç <a href=\"https://proglib.io/p/feature-selector\">FeatureSelector</a> –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç–æ–±—Ä–∞—Ç—å –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –∏–∑–±–∞–≤–∏—Ç –æ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.  –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ <a href=\"https://www.kaggle.com/code/prashant111/comprehensive-guide-on-feature-selection/notebook\">Kaggle</a> (–æ–Ω–∞ —Å–ª–æ–∂–Ω–µ–µ).    \n",
    "    \n",
    "    \n",
    "–í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—ã–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–º–µ–Ω—Ç–æ–≤. –ê —Å–∞–º—ã–π –æ—á–µ–≤–∏–¥–Ω—ã–π: –∑–∞–º–µ—Ç–Ω–æ, —á—Ç–æ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π –∏ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏) -  –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –¢–∞–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ. –ß—Ç–æ —Ç–æ–≥–¥–∞  –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ —Ç—É—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å?\n",
    "–ü–æ–ø—Ä–æ–±—É—é –æ–ø–∏—Å–∞—Ç—å –¥–ª—è —Ç–µ–±—è:\n",
    "1. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Ö–æ–¥–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–∞–º —Ö–∏–º–∏–∏ –∏ —Ñ–∏–∑–∏–∫–∏, –≤—Å–µ –ª–∏ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ?\n",
    "2. –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:\n",
    "- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π, Features Engineering: –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–±–µ–∂–∞—Ç—å—Å—è –ø–æ –±–∏–∑–Ω–µ—Å-—Ü–µ–ø–æ—á–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.\n",
    "- –û—Ç–±–æ—Ä —Å–∞–º–∏—Ö –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n",
    "    \n",
    "3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫ –ø—Ä–∏–º–µ—Ä—É: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—ã—Ä—å—è, —Å–∫–æ—Ä–æ—Å—Ç—å –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞, –∏.—Ç.–ø.\n",
    "    \n",
    "\n",
    "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –∏–ª–∏ MSA, —Ç–æ –º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∏—á–∏–Ω–∞—Ö –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏ SPC, - —Ç–æ–∂–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –Ω–∞—à–µ–π –∑–∞–¥–∞—á–∏.\n",
    "    \n",
    "–î–æ–±–∞–≤–ª—é –∑–¥–µ—Å—å, —á—Ç–æ —Ü–µ–ª—å –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã –≤–∞–∂–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–æ–ª–æ—Ç–∞.\n",
    "    \n",
    "–£—Å–ø–µ—Ö–æ–≤ —Ç–µ–±–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ!\n",
    "    \n",
    "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å —Ç–µ–±–µ)\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- [x]  Jupyter Notebook –æ—Ç–∫—Ä—ã—Ç\n",
    "- [x]  –í–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫\n",
    "- [x]  –Ø—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 1: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã\n",
    "    - [x]  –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è\n",
    "    - [x]  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ\n",
    "    - [x]  –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 2: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n",
    "    - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ\n",
    "    - [x]  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞–Ω—É–ª –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö\n",
    "    - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω—ã —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏\n",
    "- [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 3: –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è\n",
    "    - [x]  –ù–∞–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ *sMAPE*\n",
    "    - [x]  –û–±—É—á–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π\n",
    "    - [x]  –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å, –µ—ë –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 99,
    "start_time": "2023-05-25T11:30:41.569Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:30:54.134Z"
   },
   {
    "duration": 468,
    "start_time": "2023-05-25T11:30:54.144Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.616Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.618Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.625Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.626Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.627Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.628Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.629Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.631Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.632Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.633Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.634Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.635Z"
   },
   {
    "duration": 1,
    "start_time": "2023-05-25T11:30:54.636Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.637Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.639Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.640Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.641Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.642Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.643Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.644Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.645Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.646Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.647Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.648Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.649Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.650Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.651Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.652Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.653Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.654Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.655Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.656Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.657Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.658Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.659Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.660Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.661Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.663Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.725Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.727Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.728Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.729Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.730Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.731Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.732Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.733Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.734Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.735Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.736Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.738Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.739Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.740Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.741Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.743Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.745Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.747Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.748Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.749Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.750Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.751Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.753Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.754Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.755Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.756Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.757Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.758Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.759Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.760Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.761Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.762Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:30:54.762Z"
   },
   {
    "duration": 1198,
    "start_time": "2023-05-25T11:31:17.522Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:21.128Z"
   },
   {
    "duration": 1405,
    "start_time": "2023-05-25T11:31:21.153Z"
   },
   {
    "duration": 1194,
    "start_time": "2023-05-25T11:31:22.560Z"
   },
   {
    "duration": 1679,
    "start_time": "2023-05-25T11:31:23.756Z"
   },
   {
    "duration": 366,
    "start_time": "2023-05-25T11:31:25.438Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:25.806Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T11:31:25.811Z"
   },
   {
    "duration": 85,
    "start_time": "2023-05-25T11:31:25.823Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-25T11:31:25.910Z"
   },
   {
    "duration": 663,
    "start_time": "2023-05-25T11:31:25.965Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T11:31:26.631Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T11:31:26.654Z"
   },
   {
    "duration": 67,
    "start_time": "2023-05-25T11:31:26.672Z"
   },
   {
    "duration": 289,
    "start_time": "2023-05-25T11:31:26.741Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:31:27.032Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T11:31:27.037Z"
   },
   {
    "duration": 25,
    "start_time": "2023-05-25T11:31:27.049Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:31:27.076Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:31:27.084Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-25T11:31:27.097Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T11:31:27.106Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T11:31:27.124Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T11:31:27.155Z"
   },
   {
    "duration": 44,
    "start_time": "2023-05-25T11:31:27.172Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-25T11:31:27.217Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T11:31:27.235Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T11:31:27.246Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:31:27.257Z"
   },
   {
    "duration": 14,
    "start_time": "2023-05-25T11:31:27.273Z"
   },
   {
    "duration": 689,
    "start_time": "2023-05-25T11:31:27.290Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:27.981Z"
   },
   {
    "duration": 735,
    "start_time": "2023-05-25T11:31:27.986Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:28.725Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:31:28.730Z"
   },
   {
    "duration": 781,
    "start_time": "2023-05-25T11:31:28.738Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T11:31:29.520Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T11:31:29.544Z"
   },
   {
    "duration": 627,
    "start_time": "2023-05-25T11:31:29.560Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:31:30.189Z"
   },
   {
    "duration": 1163,
    "start_time": "2023-05-25T11:31:30.196Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:31:31.360Z"
   },
   {
    "duration": 1500,
    "start_time": "2023-05-25T11:31:31.367Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:31:32.869Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T11:31:32.875Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:31:32.883Z"
   },
   {
    "duration": 42,
    "start_time": "2023-05-25T11:31:32.890Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T11:31:32.934Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T11:31:32.953Z"
   },
   {
    "duration": 14,
    "start_time": "2023-05-25T11:31:32.964Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:31:32.980Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:31:32.987Z"
   },
   {
    "duration": 37,
    "start_time": "2023-05-25T11:31:32.995Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:31:33.034Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:33.048Z"
   },
   {
    "duration": 2287,
    "start_time": "2023-05-25T11:31:33.052Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:35.426Z"
   },
   {
    "duration": 10104,
    "start_time": "2023-05-25T11:31:35.430Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:31:45.536Z"
   },
   {
    "duration": 91352,
    "start_time": "2023-05-25T11:31:45.540Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:33:16.896Z"
   },
   {
    "duration": 6453,
    "start_time": "2023-05-25T11:33:16.901Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:33:23.355Z"
   },
   {
    "duration": 70,
    "start_time": "2023-05-25T11:33:23.359Z"
   },
   {
    "duration": 94,
    "start_time": "2023-05-25T11:33:23.431Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T11:33:23.528Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.541Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.542Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.544Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.546Z"
   },
   {
    "duration": 1,
    "start_time": "2023-05-25T11:33:23.546Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.548Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.548Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:33:23.549Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:34:11.095Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-25T11:34:36.275Z"
   },
   {
    "duration": 231,
    "start_time": "2023-05-25T11:34:58.995Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:35:00.755Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:35:00.891Z"
   },
   {
    "duration": 94,
    "start_time": "2023-05-25T11:35:40.135Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:35:43.653Z"
   },
   {
    "duration": 302,
    "start_time": "2023-05-25T11:36:01.177Z"
   },
   {
    "duration": 165,
    "start_time": "2023-05-25T11:37:08.664Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:37:10.106Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:37:10.240Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:37:22.094Z"
   },
   {
    "duration": 1480,
    "start_time": "2023-05-25T11:37:22.114Z"
   },
   {
    "duration": 307,
    "start_time": "2023-05-25T11:37:23.596Z"
   },
   {
    "duration": 366,
    "start_time": "2023-05-25T11:37:23.904Z"
   },
   {
    "duration": 81,
    "start_time": "2023-05-25T11:37:24.271Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:37:24.354Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T11:37:24.358Z"
   },
   {
    "duration": 82,
    "start_time": "2023-05-25T11:37:24.367Z"
   },
   {
    "duration": 50,
    "start_time": "2023-05-25T11:37:24.451Z"
   },
   {
    "duration": 696,
    "start_time": "2023-05-25T11:37:24.525Z"
   },
   {
    "duration": 25,
    "start_time": "2023-05-25T11:37:25.226Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:37:25.253Z"
   },
   {
    "duration": 58,
    "start_time": "2023-05-25T11:37:25.267Z"
   },
   {
    "duration": 254,
    "start_time": "2023-05-25T11:37:25.327Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:37:25.584Z"
   },
   {
    "duration": 38,
    "start_time": "2023-05-25T11:37:25.590Z"
   },
   {
    "duration": 38,
    "start_time": "2023-05-25T11:37:25.629Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T11:37:25.668Z"
   },
   {
    "duration": 38,
    "start_time": "2023-05-25T11:37:25.688Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T11:37:25.727Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T11:37:25.738Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T11:37:25.750Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:37:25.774Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T11:37:25.788Z"
   },
   {
    "duration": 34,
    "start_time": "2023-05-25T11:37:25.799Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:37:25.835Z"
   },
   {
    "duration": 23,
    "start_time": "2023-05-25T11:37:25.843Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T11:37:25.868Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-25T11:37:25.899Z"
   },
   {
    "duration": 654,
    "start_time": "2023-05-25T11:37:25.917Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:37:26.573Z"
   },
   {
    "duration": 873,
    "start_time": "2023-05-25T11:37:26.579Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:37:27.454Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T11:37:27.459Z"
   },
   {
    "duration": 773,
    "start_time": "2023-05-25T11:37:27.474Z"
   },
   {
    "duration": 18,
    "start_time": "2023-05-25T11:37:28.249Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:37:28.269Z"
   },
   {
    "duration": 590,
    "start_time": "2023-05-25T11:37:28.277Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T11:37:28.869Z"
   },
   {
    "duration": 605,
    "start_time": "2023-05-25T11:37:28.877Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:37:29.484Z"
   },
   {
    "duration": 963,
    "start_time": "2023-05-25T11:37:29.494Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:37:30.459Z"
   },
   {
    "duration": 24,
    "start_time": "2023-05-25T11:37:30.465Z"
   },
   {
    "duration": 40,
    "start_time": "2023-05-25T11:37:30.490Z"
   },
   {
    "duration": 35,
    "start_time": "2023-05-25T11:37:30.532Z"
   },
   {
    "duration": 23,
    "start_time": "2023-05-25T11:37:30.568Z"
   },
   {
    "duration": 36,
    "start_time": "2023-05-25T11:37:30.592Z"
   },
   {
    "duration": 36,
    "start_time": "2023-05-25T11:37:30.630Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T11:37:30.668Z"
   },
   {
    "duration": 87,
    "start_time": "2023-05-25T11:37:30.699Z"
   },
   {
    "duration": 34,
    "start_time": "2023-05-25T11:37:30.788Z"
   },
   {
    "duration": 59,
    "start_time": "2023-05-25T11:37:30.824Z"
   },
   {
    "duration": 37,
    "start_time": "2023-05-25T11:37:30.885Z"
   },
   {
    "duration": 2611,
    "start_time": "2023-05-25T11:37:30.924Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:37:33.537Z"
   },
   {
    "duration": 10001,
    "start_time": "2023-05-25T11:37:33.626Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:37:43.629Z"
   },
   {
    "duration": 93641,
    "start_time": "2023-05-25T11:37:43.634Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:39:17.277Z"
   },
   {
    "duration": 6783,
    "start_time": "2023-05-25T11:39:17.283Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:39:24.069Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:39:24.083Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T11:39:24.097Z"
   },
   {
    "duration": 127,
    "start_time": "2023-05-25T11:39:24.108Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:39:24.236Z"
   },
   {
    "duration": 86,
    "start_time": "2023-05-25T11:39:24.244Z"
   },
   {
    "duration": 521,
    "start_time": "2023-05-25T11:39:24.332Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T11:39:24.933Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T11:39:25.024Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T11:39:25.042Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T11:39:25.051Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-25T11:39:25.063Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T11:39:25.073Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:39:25.084Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T11:49:48.846Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:49:51.716Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:49:52.607Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:49:56.529Z"
   },
   {
    "duration": 1353,
    "start_time": "2023-05-25T11:49:56.551Z"
   },
   {
    "duration": 301,
    "start_time": "2023-05-25T11:49:57.906Z"
   },
   {
    "duration": 371,
    "start_time": "2023-05-25T11:49:58.209Z"
   },
   {
    "duration": 76,
    "start_time": "2023-05-25T11:49:58.582Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-25T11:49:58.660Z"
   },
   {
    "duration": 21,
    "start_time": "2023-05-25T11:49:58.663Z"
   },
   {
    "duration": 72,
    "start_time": "2023-05-25T11:49:58.685Z"
   },
   {
    "duration": 68,
    "start_time": "2023-05-25T11:49:58.759Z"
   },
   {
    "duration": 610,
    "start_time": "2023-05-25T11:49:58.829Z"
   },
   {
    "duration": 21,
    "start_time": "2023-05-25T11:49:59.441Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T11:49:59.464Z"
   },
   {
    "duration": 55,
    "start_time": "2023-05-25T11:49:59.478Z"
   },
   {
    "duration": 296,
    "start_time": "2023-05-25T11:49:59.535Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:49:59.832Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-25T11:49:59.839Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T11:49:59.849Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T11:49:59.866Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T11:49:59.874Z"
   },
   {
    "duration": 20,
    "start_time": "2023-05-25T11:49:59.905Z"
   },
   {
    "duration": 32,
    "start_time": "2023-05-25T11:49:59.927Z"
   },
   {
    "duration": 24,
    "start_time": "2023-05-25T11:49:59.960Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:49:59.987Z"
   },
   {
    "duration": 32,
    "start_time": "2023-05-25T11:49:59.994Z"
   },
   {
    "duration": 31,
    "start_time": "2023-05-25T11:50:00.028Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T11:50:00.061Z"
   },
   {
    "duration": 33,
    "start_time": "2023-05-25T11:50:00.092Z"
   },
   {
    "duration": 39,
    "start_time": "2023-05-25T11:50:00.126Z"
   },
   {
    "duration": 25,
    "start_time": "2023-05-25T11:50:00.170Z"
   },
   {
    "duration": 698,
    "start_time": "2023-05-25T11:50:00.197Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:50:00.897Z"
   },
   {
    "duration": 764,
    "start_time": "2023-05-25T11:50:00.902Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:50:01.669Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-25T11:50:01.675Z"
   },
   {
    "duration": 882,
    "start_time": "2023-05-25T11:50:01.731Z"
   },
   {
    "duration": 26,
    "start_time": "2023-05-25T11:50:02.615Z"
   },
   {
    "duration": 58,
    "start_time": "2023-05-25T11:50:02.643Z"
   },
   {
    "duration": 593,
    "start_time": "2023-05-25T11:50:02.703Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:50:03.298Z"
   },
   {
    "duration": 598,
    "start_time": "2023-05-25T11:50:03.305Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:50:03.905Z"
   },
   {
    "duration": 896,
    "start_time": "2023-05-25T11:50:03.912Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:50:04.809Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T11:50:04.815Z"
   },
   {
    "duration": 36,
    "start_time": "2023-05-25T11:50:04.834Z"
   },
   {
    "duration": 65,
    "start_time": "2023-05-25T11:50:04.872Z"
   },
   {
    "duration": 24,
    "start_time": "2023-05-25T11:50:04.939Z"
   },
   {
    "duration": 98,
    "start_time": "2023-05-25T11:50:04.965Z"
   },
   {
    "duration": 108,
    "start_time": "2023-05-25T11:50:05.065Z"
   },
   {
    "duration": 163,
    "start_time": "2023-05-25T11:50:05.175Z"
   },
   {
    "duration": 83,
    "start_time": "2023-05-25T11:50:05.340Z"
   },
   {
    "duration": 78,
    "start_time": "2023-05-25T11:50:05.425Z"
   },
   {
    "duration": 80,
    "start_time": "2023-05-25T11:50:05.505Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T11:50:05.587Z"
   },
   {
    "duration": 2421,
    "start_time": "2023-05-25T11:50:05.608Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:50:08.032Z"
   },
   {
    "duration": 10087,
    "start_time": "2023-05-25T11:50:08.038Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:50:18.127Z"
   },
   {
    "duration": 96215,
    "start_time": "2023-05-25T11:50:18.131Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:51:54.348Z"
   },
   {
    "duration": 6260,
    "start_time": "2023-05-25T11:51:54.353Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:52:00.615Z"
   },
   {
    "duration": 25,
    "start_time": "2023-05-25T11:52:00.625Z"
   },
   {
    "duration": 135,
    "start_time": "2023-05-25T11:52:00.652Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.790Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.791Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.793Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.794Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.796Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.798Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.799Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T11:52:00.801Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T11:52:34.250Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T11:54:05.962Z"
   },
   {
    "duration": 2789,
    "start_time": "2023-05-25T11:54:06.135Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T11:54:14.931Z"
   },
   {
    "duration": 35,
    "start_time": "2023-05-25T11:56:48.299Z"
   },
   {
    "duration": 92,
    "start_time": "2023-05-25T11:56:48.433Z"
   },
   {
    "duration": 34,
    "start_time": "2023-05-25T11:59:04.893Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T11:59:05.082Z"
   },
   {
    "duration": 234,
    "start_time": "2023-05-25T11:59:16.993Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T11:59:17.685Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T11:59:19.950Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:00:55.939Z"
   },
   {
    "duration": 1577,
    "start_time": "2023-05-25T12:00:55.946Z"
   },
   {
    "duration": 339,
    "start_time": "2023-05-25T12:00:57.525Z"
   },
   {
    "duration": 382,
    "start_time": "2023-05-25T12:00:57.866Z"
   },
   {
    "duration": 81,
    "start_time": "2023-05-25T12:00:58.250Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:00:58.334Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-25T12:00:58.340Z"
   },
   {
    "duration": 105,
    "start_time": "2023-05-25T12:00:58.350Z"
   },
   {
    "duration": 86,
    "start_time": "2023-05-25T12:00:58.458Z"
   },
   {
    "duration": 684,
    "start_time": "2023-05-25T12:00:58.546Z"
   },
   {
    "duration": 27,
    "start_time": "2023-05-25T12:00:59.232Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T12:00:59.261Z"
   },
   {
    "duration": 68,
    "start_time": "2023-05-25T12:00:59.283Z"
   },
   {
    "duration": 294,
    "start_time": "2023-05-25T12:00:59.354Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:00:59.654Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:00:59.662Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T12:00:59.673Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T12:00:59.689Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-25T12:00:59.724Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:00:59.743Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:00:59.758Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T12:00:59.770Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:00:59.795Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:00:59.826Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:00:59.833Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:00:59.849Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:00:59.858Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:00:59.867Z"
   },
   {
    "duration": 49,
    "start_time": "2023-05-25T12:00:59.876Z"
   },
   {
    "duration": 719,
    "start_time": "2023-05-25T12:00:59.928Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:01:00.649Z"
   },
   {
    "duration": 821,
    "start_time": "2023-05-25T12:01:00.654Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:01:01.477Z"
   },
   {
    "duration": 50,
    "start_time": "2023-05-25T12:01:01.484Z"
   },
   {
    "duration": 882,
    "start_time": "2023-05-25T12:01:01.537Z"
   },
   {
    "duration": 18,
    "start_time": "2023-05-25T12:01:02.425Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T12:01:02.446Z"
   },
   {
    "duration": 636,
    "start_time": "2023-05-25T12:01:02.461Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:01:03.099Z"
   },
   {
    "duration": 595,
    "start_time": "2023-05-25T12:01:03.107Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:01:03.704Z"
   },
   {
    "duration": 897,
    "start_time": "2023-05-25T12:01:03.728Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:01:04.627Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T12:01:04.635Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:01:04.647Z"
   },
   {
    "duration": 23,
    "start_time": "2023-05-25T12:01:04.660Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T12:01:04.685Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T12:01:04.704Z"
   },
   {
    "duration": 18,
    "start_time": "2023-05-25T12:01:04.735Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:01:04.755Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:01:04.762Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T12:01:04.770Z"
   },
   {
    "duration": 36,
    "start_time": "2023-05-25T12:01:04.789Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:01:04.827Z"
   },
   {
    "duration": 2496,
    "start_time": "2023-05-25T12:01:04.832Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:01:07.330Z"
   },
   {
    "duration": 10090,
    "start_time": "2023-05-25T12:01:07.339Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:01:17.431Z"
   },
   {
    "duration": 94015,
    "start_time": "2023-05-25T12:01:17.436Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:02:51.454Z"
   },
   {
    "duration": 6364,
    "start_time": "2023-05-25T12:02:51.460Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:02:57.826Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:02:57.830Z"
   },
   {
    "duration": 188,
    "start_time": "2023-05-25T12:02:57.838Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:02:58.028Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:02:58.037Z"
   },
   {
    "duration": 283,
    "start_time": "2023-05-25T12:02:58.044Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:02:58.330Z"
   },
   {
    "duration": 87,
    "start_time": "2023-05-25T12:02:58.339Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T12:02:58.428Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:02:58.441Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:02:58.448Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:02:58.455Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:02:58.462Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:15:38.512Z"
   },
   {
    "duration": 1523,
    "start_time": "2023-05-25T12:15:38.522Z"
   },
   {
    "duration": 305,
    "start_time": "2023-05-25T12:15:40.047Z"
   },
   {
    "duration": 374,
    "start_time": "2023-05-25T12:15:40.353Z"
   },
   {
    "duration": 76,
    "start_time": "2023-05-25T12:15:40.729Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-25T12:15:40.807Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T12:15:40.811Z"
   },
   {
    "duration": 67,
    "start_time": "2023-05-25T12:15:40.824Z"
   },
   {
    "duration": 77,
    "start_time": "2023-05-25T12:15:40.893Z"
   },
   {
    "duration": 626,
    "start_time": "2023-05-25T12:15:40.971Z"
   },
   {
    "duration": 38,
    "start_time": "2023-05-25T12:15:41.598Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:15:41.638Z"
   },
   {
    "duration": 24,
    "start_time": "2023-05-25T12:15:41.652Z"
   },
   {
    "duration": 283,
    "start_time": "2023-05-25T12:15:41.678Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:15:41.965Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T12:15:41.971Z"
   },
   {
    "duration": 37,
    "start_time": "2023-05-25T12:15:41.983Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:15:42.022Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T12:15:42.035Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T12:15:42.065Z"
   },
   {
    "duration": 14,
    "start_time": "2023-05-25T12:15:42.089Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T12:15:42.104Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:15:42.135Z"
   },
   {
    "duration": 33,
    "start_time": "2023-05-25T12:15:42.139Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T12:15:42.174Z"
   },
   {
    "duration": 127,
    "start_time": "2023-05-25T12:15:42.198Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.327Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.329Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.331Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.332Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.334Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.335Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.337Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.339Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.340Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.342Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.343Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.345Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.347Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.348Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.350Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.351Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.353Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.354Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.355Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.356Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.358Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.359Z"
   },
   {
    "duration": 1,
    "start_time": "2023-05-25T12:15:42.360Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.362Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.363Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.364Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.425Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.427Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.428Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.430Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.431Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.432Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.434Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.435Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.436Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.437Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.438Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.440Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.441Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.442Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.443Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.444Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.445Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.446Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.446Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.447Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.448Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:15:42.449Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T12:16:53.591Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:17:38.983Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-25T12:17:40.226Z"
   },
   {
    "duration": 57,
    "start_time": "2023-05-25T12:17:48.134Z"
   },
   {
    "duration": 64,
    "start_time": "2023-05-25T12:18:29.028Z"
   },
   {
    "duration": 43,
    "start_time": "2023-05-25T12:18:52.583Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-25T12:19:06.381Z"
   },
   {
    "duration": 54,
    "start_time": "2023-05-25T12:19:13.810Z"
   },
   {
    "duration": 50,
    "start_time": "2023-05-25T12:19:23.679Z"
   },
   {
    "duration": 47,
    "start_time": "2023-05-25T12:20:16.554Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:20:29.729Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:20:39.546Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T12:20:39.558Z"
   },
   {
    "duration": 450,
    "start_time": "2023-05-25T12:20:39.578Z"
   },
   {
    "duration": 402,
    "start_time": "2023-05-25T12:20:40.032Z"
   },
   {
    "duration": 77,
    "start_time": "2023-05-25T12:20:40.436Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:20:40.516Z"
   },
   {
    "duration": 21,
    "start_time": "2023-05-25T12:20:40.524Z"
   },
   {
    "duration": 72,
    "start_time": "2023-05-25T12:20:40.547Z"
   },
   {
    "duration": 53,
    "start_time": "2023-05-25T12:20:40.621Z"
   },
   {
    "duration": 660,
    "start_time": "2023-05-25T12:20:40.676Z"
   },
   {
    "duration": 33,
    "start_time": "2023-05-25T12:20:41.339Z"
   },
   {
    "duration": 51,
    "start_time": "2023-05-25T12:20:41.375Z"
   },
   {
    "duration": 33,
    "start_time": "2023-05-25T12:20:41.428Z"
   },
   {
    "duration": 273,
    "start_time": "2023-05-25T12:20:41.463Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:20:41.742Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T12:20:41.749Z"
   },
   {
    "duration": 17,
    "start_time": "2023-05-25T12:20:41.767Z"
   },
   {
    "duration": 26,
    "start_time": "2023-05-25T12:20:41.785Z"
   },
   {
    "duration": 32,
    "start_time": "2023-05-25T12:20:41.813Z"
   },
   {
    "duration": 35,
    "start_time": "2023-05-25T12:20:41.847Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:20:41.884Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T12:20:41.892Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:20:41.908Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:20:41.914Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:20:41.922Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:20:41.934Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:20:45.917Z"
   },
   {
    "duration": 18,
    "start_time": "2023-05-25T12:20:45.927Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T12:20:45.947Z"
   },
   {
    "duration": 804,
    "start_time": "2023-05-25T12:20:45.979Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:20:46.787Z"
   },
   {
    "duration": 746,
    "start_time": "2023-05-25T12:20:46.794Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:20:47.542Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:20:47.549Z"
   },
   {
    "duration": 835,
    "start_time": "2023-05-25T12:20:47.557Z"
   },
   {
    "duration": 33,
    "start_time": "2023-05-25T12:20:48.394Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:20:48.430Z"
   },
   {
    "duration": 811,
    "start_time": "2023-05-25T12:20:48.438Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:20:49.251Z"
   },
   {
    "duration": 786,
    "start_time": "2023-05-25T12:20:49.262Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:20:50.051Z"
   },
   {
    "duration": 1045,
    "start_time": "2023-05-25T12:20:50.062Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:20:51.108Z"
   },
   {
    "duration": 40,
    "start_time": "2023-05-25T12:20:51.116Z"
   },
   {
    "duration": 18,
    "start_time": "2023-05-25T12:20:51.159Z"
   },
   {
    "duration": 47,
    "start_time": "2023-05-25T12:20:51.180Z"
   },
   {
    "duration": 30,
    "start_time": "2023-05-25T12:20:51.230Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T12:20:51.263Z"
   },
   {
    "duration": 46,
    "start_time": "2023-05-25T12:20:51.288Z"
   },
   {
    "duration": 20,
    "start_time": "2023-05-25T12:20:51.338Z"
   },
   {
    "duration": 24,
    "start_time": "2023-05-25T12:20:51.361Z"
   },
   {
    "duration": 28,
    "start_time": "2023-05-25T12:20:51.388Z"
   },
   {
    "duration": 32,
    "start_time": "2023-05-25T12:20:51.419Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T12:20:51.454Z"
   },
   {
    "duration": 2874,
    "start_time": "2023-05-25T12:20:51.467Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:20:54.343Z"
   },
   {
    "duration": 9199,
    "start_time": "2023-05-25T12:20:54.354Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:21:03.555Z"
   },
   {
    "duration": 95554,
    "start_time": "2023-05-25T12:21:03.561Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:22:39.117Z"
   },
   {
    "duration": 6453,
    "start_time": "2023-05-25T12:22:39.128Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:22:45.583Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T12:22:45.588Z"
   },
   {
    "duration": 228,
    "start_time": "2023-05-25T12:22:45.600Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:22:45.831Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:22:45.843Z"
   },
   {
    "duration": 677,
    "start_time": "2023-05-25T12:22:45.852Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T12:22:46.532Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:22:46.624Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:22:46.633Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:22:46.643Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:22:46.725Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T12:22:46.736Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-25T12:22:46.758Z"
   },
   {
    "duration": 561,
    "start_time": "2023-05-25T12:23:22.126Z"
   },
   {
    "duration": 573,
    "start_time": "2023-05-25T12:23:28.548Z"
   },
   {
    "duration": 715,
    "start_time": "2023-05-25T12:23:41.798Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T12:24:53.873Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:24:58.077Z"
   },
   {
    "duration": 1504,
    "start_time": "2023-05-25T12:24:58.096Z"
   },
   {
    "duration": 375,
    "start_time": "2023-05-25T12:24:59.603Z"
   },
   {
    "duration": 412,
    "start_time": "2023-05-25T12:24:59.983Z"
   },
   {
    "duration": 80,
    "start_time": "2023-05-25T12:25:00.398Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:25:00.479Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T12:25:00.484Z"
   },
   {
    "duration": 112,
    "start_time": "2023-05-25T12:25:00.508Z"
   },
   {
    "duration": 58,
    "start_time": "2023-05-25T12:25:00.621Z"
   },
   {
    "duration": 660,
    "start_time": "2023-05-25T12:25:00.680Z"
   },
   {
    "duration": 24,
    "start_time": "2023-05-25T12:25:01.344Z"
   },
   {
    "duration": 136,
    "start_time": "2023-05-25T12:25:01.370Z"
   },
   {
    "duration": 147,
    "start_time": "2023-05-25T12:25:01.508Z"
   },
   {
    "duration": 278,
    "start_time": "2023-05-25T12:25:01.657Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:25:01.936Z"
   },
   {
    "duration": 25,
    "start_time": "2023-05-25T12:25:01.944Z"
   },
   {
    "duration": 33,
    "start_time": "2023-05-25T12:25:01.972Z"
   },
   {
    "duration": 41,
    "start_time": "2023-05-25T12:25:02.007Z"
   },
   {
    "duration": 61,
    "start_time": "2023-05-25T12:25:02.050Z"
   },
   {
    "duration": 41,
    "start_time": "2023-05-25T12:25:02.114Z"
   },
   {
    "duration": 36,
    "start_time": "2023-05-25T12:25:02.157Z"
   },
   {
    "duration": 55,
    "start_time": "2023-05-25T12:25:02.195Z"
   },
   {
    "duration": 13,
    "start_time": "2023-05-25T12:25:02.252Z"
   },
   {
    "duration": 94,
    "start_time": "2023-05-25T12:25:02.267Z"
   },
   {
    "duration": 82,
    "start_time": "2023-05-25T12:25:02.363Z"
   },
   {
    "duration": 31,
    "start_time": "2023-05-25T12:25:02.447Z"
   },
   {
    "duration": 48,
    "start_time": "2023-05-25T12:25:02.480Z"
   },
   {
    "duration": 69,
    "start_time": "2023-05-25T12:25:02.530Z"
   },
   {
    "duration": 149,
    "start_time": "2023-05-25T12:25:02.603Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.753Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.755Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.756Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.757Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.759Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.760Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.762Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.763Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.765Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.766Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.767Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.769Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.770Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.771Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.773Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.774Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.776Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.777Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.778Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.779Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.780Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.826Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.828Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.829Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.831Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.832Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.833Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.835Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.836Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.837Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.839Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.840Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.842Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.844Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.845Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.846Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.847Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.848Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.849Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.851Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.852Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.853Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.855Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.857Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:02.858Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:25:53.174Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:25:56.932Z"
   },
   {
    "duration": 26,
    "start_time": "2023-05-25T12:25:56.943Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:56.971Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:56.973Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:56.974Z"
   },
   {
    "duration": 29,
    "start_time": "2023-05-25T12:25:56.977Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.010Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.011Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.013Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.024Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.026Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.028Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.031Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.033Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.034Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.036Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.038Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.039Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.041Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.043Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.045Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.046Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.048Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.050Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.052Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.053Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.055Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.056Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.057Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.059Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.060Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.061Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.124Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.126Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.127Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.128Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.130Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.131Z"
   },
   {
    "duration": 1,
    "start_time": "2023-05-25T12:25:57.132Z"
   },
   {
    "duration": 60,
    "start_time": "2023-05-25T12:25:57.139Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T12:25:57.200Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.211Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.213Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.214Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.215Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.216Z"
   },
   {
    "duration": 0,
    "start_time": "2023-05-25T12:25:57.217Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:26:24.105Z"
   },
   {
    "duration": 1498,
    "start_time": "2023-05-25T12:26:24.111Z"
   },
   {
    "duration": 345,
    "start_time": "2023-05-25T12:26:25.611Z"
   },
   {
    "duration": 392,
    "start_time": "2023-05-25T12:26:25.958Z"
   },
   {
    "duration": 81,
    "start_time": "2023-05-25T12:26:26.352Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-25T12:26:26.435Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-25T12:26:26.438Z"
   },
   {
    "duration": 77,
    "start_time": "2023-05-25T12:26:26.455Z"
   },
   {
    "duration": 46,
    "start_time": "2023-05-25T12:26:26.533Z"
   },
   {
    "duration": 654,
    "start_time": "2023-05-25T12:26:26.580Z"
   },
   {
    "duration": 23,
    "start_time": "2023-05-25T12:26:27.237Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T12:26:27.262Z"
   },
   {
    "duration": 55,
    "start_time": "2023-05-25T12:26:27.283Z"
   },
   {
    "duration": 275,
    "start_time": "2023-05-25T12:26:27.340Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:26:27.617Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:26:27.628Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T12:26:27.639Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:26:27.652Z"
   },
   {
    "duration": 11,
    "start_time": "2023-05-25T12:26:27.657Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:26:27.669Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:26:27.680Z"
   },
   {
    "duration": 46,
    "start_time": "2023-05-25T12:26:27.688Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:26:27.735Z"
   },
   {
    "duration": 9,
    "start_time": "2023-05-25T12:26:27.744Z"
   },
   {
    "duration": 15,
    "start_time": "2023-05-25T12:26:27.755Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:26:27.771Z"
   },
   {
    "duration": 8,
    "start_time": "2023-05-25T12:26:27.780Z"
   },
   {
    "duration": 37,
    "start_time": "2023-05-25T12:26:27.790Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:26:27.836Z"
   },
   {
    "duration": 612,
    "start_time": "2023-05-25T12:26:27.851Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:26:28.465Z"
   },
   {
    "duration": 755,
    "start_time": "2023-05-25T12:26:28.470Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:26:29.227Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:26:29.232Z"
   },
   {
    "duration": 916,
    "start_time": "2023-05-25T12:26:29.240Z"
   },
   {
    "duration": 20,
    "start_time": "2023-05-25T12:26:30.158Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:26:30.180Z"
   },
   {
    "duration": 713,
    "start_time": "2023-05-25T12:26:30.188Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:26:30.904Z"
   },
   {
    "duration": 604,
    "start_time": "2023-05-25T12:26:30.911Z"
   },
   {
    "duration": 10,
    "start_time": "2023-05-25T12:26:31.517Z"
   },
   {
    "duration": 967,
    "start_time": "2023-05-25T12:26:31.528Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:26:32.497Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:26:32.503Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:26:32.525Z"
   },
   {
    "duration": 22,
    "start_time": "2023-05-25T12:26:32.532Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-25T12:26:32.557Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:26:32.575Z"
   },
   {
    "duration": 43,
    "start_time": "2023-05-25T12:26:32.589Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:26:32.634Z"
   },
   {
    "duration": 16,
    "start_time": "2023-05-25T12:26:32.641Z"
   },
   {
    "duration": 14,
    "start_time": "2023-05-25T12:26:32.659Z"
   },
   {
    "duration": 19,
    "start_time": "2023-05-25T12:26:32.675Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:26:32.726Z"
   },
   {
    "duration": 2704,
    "start_time": "2023-05-25T12:26:32.731Z"
   },
   {
    "duration": 89,
    "start_time": "2023-05-25T12:26:35.437Z"
   },
   {
    "duration": 10915,
    "start_time": "2023-05-25T12:26:35.529Z"
   },
   {
    "duration": 3,
    "start_time": "2023-05-25T12:26:46.446Z"
   },
   {
    "duration": 94122,
    "start_time": "2023-05-25T12:26:46.450Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:28:20.574Z"
   },
   {
    "duration": 6358,
    "start_time": "2023-05-25T12:28:20.580Z"
   },
   {
    "duration": 2,
    "start_time": "2023-05-25T12:28:26.939Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:28:26.943Z"
   },
   {
    "duration": 176,
    "start_time": "2023-05-25T12:28:26.949Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:28:27.127Z"
   },
   {
    "duration": 6,
    "start_time": "2023-05-25T12:28:27.133Z"
   },
   {
    "duration": 191,
    "start_time": "2023-05-25T12:28:27.141Z"
   },
   {
    "duration": 92,
    "start_time": "2023-05-25T12:28:27.334Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:28:27.428Z"
   },
   {
    "duration": 92,
    "start_time": "2023-05-25T12:28:27.435Z"
   },
   {
    "duration": 12,
    "start_time": "2023-05-25T12:28:27.528Z"
   },
   {
    "duration": 4,
    "start_time": "2023-05-25T12:28:27.542Z"
   },
   {
    "duration": 7,
    "start_time": "2023-05-25T12:28:27.548Z"
   },
   {
    "duration": 5,
    "start_time": "2023-05-25T12:28:27.557Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "165px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "toc-autonumbering": true
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
